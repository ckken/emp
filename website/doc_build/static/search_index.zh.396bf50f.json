[{"id":0,"title":"API","content":"#","routePath":"/api/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"appEntry","content":"#\n\nTIP\n\n项目代码入口文件 如 index.js\n\n当 entries 设置后 该选项失效\n\n * 类型： string\n * 默认值： index.js\n\n","routePath":"/config/base/appEntry","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"appSrc","content":"#\n\n * 项目代码路径\n * 类型： string\n * 默认值： src\n\n","routePath":"/config/base/appSrc","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"autoDevBase","content":"#\n\nTIP\n\n启动后 自动设置 base 为当前 Ip+port的路径如 base = http://127.0.0.1:8080/ 并且固定 ws 方便代理调试\n\n * 类型： boolean\n * 默认值： false\n\n\n\n\n作用#\n\n便于远程接入代理工具进行调试、无需代理以及嵌入debug 工具到页面，影响美观","routePath":"/config/base/autoDevBase","lang":"zh","toc":[{"text":"作用","id":"作用","depth":2,"charIndex":116}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"autoPages","content":"#\n\nTIP\n\n启动后 自动寻找 pages 目录的入口文件\n\n * 类型： boolean | {path:'pages'}\n * 默认值： false\n\n\n\n\n作用#\n\n * 捕抓 src/pages 目录下面的所有文件、并且根据 html 与 entries 配置 进行对 html-template 进行配置 如:\n\n","routePath":"/config/base/autoPages","lang":"zh","toc":[{"text":"作用","id":"作用","depth":2,"charIndex":81}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"base","content":"#\n\nTIP\n\n生成环境 可以通过 base 设置 cdn 路径\n\npublicPath 根路径 可参考webpack,业务模式默认为 auto\n\nhtml 部分 publicPath 默认为 undefined,可设置全量域名或子目录适配，也可以单独在html设置 Public\n\n * 类型： boolean | string | 'auto'\n * 默认值： 'auto'\n\n\n\n\n生产与开发环境设置用例#\n\n","routePath":"/config/base/base","lang":"zh","toc":[{"text":"生产与开发环境设置用例","id":"生产与开发环境设置用例","depth":2,"charIndex":193}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"chain","content":"#\n\n * 重置rspack的设置\n\n\n配置#\n\n","routePath":"/config/base/chain","lang":"zh","toc":[{"text":"配置","id":"配置","depth":2,"charIndex":19}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"css","content":"#\n\nTIP\n\ncss 快捷设置方式\n\n\ncss.sass#\n\n> sass 构建支持 default 与 modern 两种方式\n\n * 类型\n\n\n\n * 默认为\n\n\n\n","routePath":"/config/base/css","lang":"zh","toc":[{"text":"css.sass","id":"csssass","depth":2,"charIndex":20}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"define","content":"#\n\n * 全局环境替换\n * 类型： Record<string, any>\n\n\ndefineFix#\n\n * 类型 all | esm | cjs | none\n * 默认 cjs\n\nTIP\n\n是否创建 cjs 的 process.env 或者 esm 的 import.meta.env\n\nall 两者创建\n\nesm 创建 import.meta.env\n\ncjs 创建 process.env\n\nnone 不创建\n\n","routePath":"/config/base/define","lang":"zh","toc":[{"text":"defineFix","id":"definefix","depth":2,"charIndex":41}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"entries","content":"#\n\n * 多页面入口配置，相当于html的集合\n * 类型： {[entryFilename: string]: HtmlType}\n * HtmlType的配置参考\n\n","routePath":"/config/base/entries","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"html","content":"#\n\n * 页面生成配置\n * 类型： HtmlType\n\n\n\nTIP\n\n3.1.4及以后的版本，把files 和 tags 统一合并到 tags?: InjectHeadTagsTypeItem[] 中配置\n\n\n\n\nhtml#\n\n * 页面生成配置\n * 类型： HtmlType\n\n","routePath":"/config/base/html","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"lifeCycle","content":"#\n\nEMP 3.0执行生命周期\n\n\n生命周期全览#\n\n\n\n\n使用方法#\n\n","routePath":"/config/base/lifeCycle","lang":"zh","toc":[{"text":"生命周期全览","id":"生命周期全览","depth":2,"charIndex":18},{"text":"使用方法","id":"使用方法","depth":2,"charIndex":30}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"plugins","content":"#\n\nEMP v3的功能拓展。 插件执行顺序是并行、可以考虑使用 lifeCycle 进行时序设置\n\n\n以Vue 3.0为例#\n\n\n安装插件#\n\n\n配置插件#\n\n\n\n\n插件的基本结构#\n\n","routePath":"/config/base/plugins","lang":"zh","toc":[{"text":"以`Vue 3.0`为例","id":"以vue-30为例","depth":2,"charIndex":-1},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":65},{"text":"配置插件","id":"配置插件","depth":3,"charIndex":73},{"text":"插件的基本结构","id":"插件的基本结构","depth":2,"charIndex":83}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"resolve","content":"#\n\n模块解析：该选项用于配置 Rspack 模块解析逻辑。\n\n * 类型： Object\n\n\nresolve.alias#\n\n * 类型： Record<string, false | string | (string | false)[]>\n * 默认值： {}\n\n路径别名，例如：\n\n\n\n此时：\n\n * require(\"@/a\") 会尝试解析 <root>/src/a。\n * require(\"abc\") 会尝试解析 <root>/src/abc。\n * require(\"abc/file.js\") 不会命中匹配规则，它会尝试去解析 node_modules/abc/files.js。\n\n\nresolve.aliasFields#\n\n * Type: string[]\n * Default: ['browser']\n\n定义一个字段，例如 browser，以依照此规范进行解析。\n\n\nresolve.browserField#\n\n * 类型： boolean\n * 默认值： true\n\n是否按照 package-browser-filed-spec 规则解析。\n\n等同于 enhanced-resolve 的 resolve.aliasFields = [\"browser\"]。\n\n\nresolve.conditionNames#\n\n * 类型： string[]\n * 默认值： []\n\n与 node 的 conditionNames 相同，用于 package.json 中的 exports 和 imports 字段。\n\n\nresolve.extensions#\n\n * 类型： string[]\n * 默认值： [\".js\", \".json\", \".wasm\"]\n\n按照顺序解析模块，例如 require('./index')，会依次尝试解析 './index.js'、'./index.json'...\n\n\nresolve.extensionAlias#\n\n * 类型： Record<string, string[] | string>\n * 默认值： {}\n\n定义拓展名的别名，例如\n\n\n\n在 require('./index.js') 时，会依次尝试解析 './index.ts', ./index.js。\n\n\nresolve.fallback#\n\n * 类型： Record<string, false | string>\n * 默认值： {}\n\n解析失败时的重定向。\n\n\nresolve.mainFields#\n\n * 类型： string[]\n * 默认值：\n   * target 为 web 时为 [\"browser\", \"module\", \"main\"]\n   * 其他则为 [\"module\", \"main\"]\n\n尝试解析 package.json 中的字段，例如：\n\n\n\n则 `` 的结果为 lib/es/index.js。\n\n\nresolve.mainFiles#\n\n * 类型： string[]\n * 默认值： [\"index\"]\n\n解析目录时的文件名后缀，例如 require('./dir/') 会尝试解析 './dir/index'。\n\n\nresolve.exportsFields#\n\n * 类型： string[]\n * 默认值： [\"exports\"]\n\n自定义 package.json 中的 exports 字段，例如：\n\n\n\n则当配置为 [\"testExports\", \"exports\"] 时, `` 的结果为 lib/test.js。\n\n\nresolve.modules#\n\n * 类型： string[]\n * 默认值： [\"node_modules\"]\n\n解析依赖时的目录名。\n\n\nresolve.preferRelative#\n\n * 类型： boolean\n * 默认值： false\n\n当开启时，require('file') 会首先寻找当前目录下的 ./file 文件，而不是 <modules>/file。\n\n\nresolve.preferAbsolute#\n\n * Type: boolean\n * Default: false\n\n在解析时，倾向使用与 resolve.roots 相关的绝对路径。\n\n\nresolve.tsConfigPath#\n\n * 类型： string | undefined\n * 默认值： undefined\n\n这个选项接受的是 tsconfig.json 的文件路径。在开启这个选项后， Rspack 会基于 tsconfig.json 中 的 paths 和\nbaseUrl 来寻找模块，其功能等同于 tsconfig-paths-webpack-plugin。\n\n\n\n点击查看例子。\n\nWARNING\n\n不支持 tsconfig.json#extends 字段。\n\n\nresolve.tsConfig#\n\n * 类型: object\n * 默认值: undefined\n\n\n\n\nresolve.tsConfig.configFile#\n\n * 类型: string\n\n同 resolve.tsConfigPath.\n\n这个选项接受的是 tsconfig.json 的文件路径。在开启这个选项后， Rspack 会基于 tsconfig.json 中 的 paths 和\nbaseUrl 来寻找模块，其功能等同于 tsconfig-paths-webpack-plugin。\n\n\nresolve.tsConfig.references#\n\n * 类型: string[] | \"auto\" | undefined\n * 默认值: undefined\n\n支持 tsconfig-paths-webpack-plugin 中定义的 tsconfig project references.\n\n可以通过文件路径用于手动配置，或者使用 auto 用于自动读取 tsconfig.references 中的文件路径。\n\n使用 undefined 将会关闭该功能。\n\n\nresolve.fullySpecified#\n\n * 类型： boolean\n * 默认值： false\n\n不再解析扩展名，不再解析 package.json 中的 mainFiles（但不会影响来自 mainFiles, browser, alias 的请求）。\n\n\nresolve.restrictions#\n\n * Type: string[]\n * Default: []\n\n限制请求解析路径的解析限制列表。\n\n\nresolve.roots#\n\n * Type: string[]\n * Default: []\n\n一个目录列表，用于解析服务器相对 URL（以'/'开头的 URL）。默认使用 context 配置选项。在非 Windows\n系统上，这些请求首先作为绝对路径进行解析。\n\n\nresolve.byDependency#\n\n * 类型： Record<string, Resolve>.\n\n依据模块类型自定义 Resolve 配置。","routePath":"/config/base/resolve","lang":"zh","toc":[{"text":"resolve.alias","id":"resolvealias","depth":2,"charIndex":47},{"text":"resolve.aliasFields","id":"resolvealiasfields","depth":2,"charIndex":301},{"text":"resolve.browserField","id":"resolvebrowserfield","depth":2,"charIndex":398},{"text":"resolve.conditionNames","id":"resolveconditionnames","depth":2,"charIndex":549},{"text":"resolve.extensions","id":"resolveextensions","depth":2,"charIndex":672},{"text":"resolve.extensionAlias","id":"resolveextensionalias","depth":2,"charIndex":816},{"text":"resolve.fallback","id":"resolvefallback","depth":2,"charIndex":971},{"text":"resolve.mainFields","id":"resolvemainfields","depth":2,"charIndex":1053},{"text":"resolve.mainFiles","id":"resolvemainfiles","depth":2,"charIndex":1238},{"text":"resolve.exportsFields","id":"resolveexportsfields","depth":2,"charIndex":1349},{"text":"resolve.modules","id":"resolvemodules","depth":2,"charIndex":1507},{"text":"resolve.preferRelative","id":"resolvepreferrelative","depth":2,"charIndex":1580},{"text":"resolve.preferAbsolute","id":"resolvepreferabsolute","depth":2,"charIndex":1700},{"text":"resolve.tsConfigPath","id":"resolvetsconfigpath","depth":2,"charIndex":1797},{"text":"resolve.tsConfig","id":"resolvetsconfig","depth":2,"charIndex":2046},{"text":"resolve.tsConfig.configFile","id":"resolvetsconfigconfigfile","depth":3,"charIndex":2101},{"text":"resolve.tsConfig.references","id":"resolvetsconfigreferences","depth":3,"charIndex":2301},{"text":"resolve.fullySpecified","id":"resolvefullyspecified","depth":2,"charIndex":2540},{"text":"resolve.restrictions","id":"resolverestrictions","depth":2,"charIndex":2676},{"text":"resolve.roots","id":"resolveroots","depth":2,"charIndex":2752},{"text":"resolve.byDependency","id":"resolvebydependency","depth":2,"charIndex":2889}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"server","content":"#\n\n * Dev Server和Prod Server服务配置\n * 类型： ServerType\n * 详细配置 参考\n\n\n\n\n配置#\n\n","routePath":"/config/base/server","lang":"zh","toc":[{"text":"配置","id":"配置","depth":2,"charIndex":65}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"build.assetsDir","content":"#\n\n * 生成静态目录\n * 类型： string\n * 默认值： assets\n\n","routePath":"/config/build/assetsDir","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"build.browserslist","content":"#\n\n * 浏览器兼容性设置\n * 类型： string[]\n * 默认值： store.browserslistOptions.default\n\n\n\n","routePath":"/config/build/browserslist","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"build.chunkIds","content":"#\n\nTIP\n\nnamed 使用有意义、方便调试的内容当作模块 id。此选项会在开发环境下默认开启。\n\ndeterministic 使用对模块标识符哈希后的数字当作模块 id，有益于长期缓存。此选项会在生产环境下默认开启。\n\n * 类型：named | deterministic\n\n","routePath":"/config/build/chunkIds","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"build.externalHelpers","content":"#\n\n * swc 会将一些工具类，通过模块的形式导入\n * 类型： boolean\n * 默认值： false\n\n","routePath":"/config/build/externalHelpers","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"build.minOptions","content":"#\n\n * 生成代码 参考 Configuring SWC\n * 类型： SwcJsMinimizerRspackPluginOptions\n\n\n\n * 默认值： {}\n\n","routePath":"/config/build/minOptions","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"build.minify","content":"#\n\n * 是否压缩\n * 类型： boolean\n * 默认值： true\n\n","routePath":"/config/build/minify","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"build.moduleIds","content":"#\n\nTIP\n\nnamed 使用有意义、方便调试的内容当作模块 id。此选项会在开发环境下默认开启。\n\ndeterministic 使用对模块标识符哈希后的数字当作模块 id，有益于长期缓存。此选项会在生产环境下默认开启。\n\n * 类型：named | deterministic\n\n","routePath":"/config/build/moduleIds","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"build.outDir","content":"#\n\n * 生成代码目录\n * 类型： string\n * 默认值： dist\n\n","routePath":"/config/build/outDir","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"output.sourceMap","content":"#\n\n * 类型：\n\n\n\n * 默认值：\n\n\n\n * 版本： >= 0.2.0\n\n用于设置是否生成 source map 文件，以及生成哪一种格式的 source map。\n\n什么是 source map\n\nsource map 是保存源代码映射关系的信息文件，它记录了编译后的代码的每一个位置，以及所对应的编译前的位置。通过 source\nmap，可以在调试编译后的代码时，直接查看对应的源代码。\n\n\n默认行为#\n\n默认情况下，Rsbuild 的 source map 生成规则如下：\n\n * 在开发环境构建时，会生成 JS 文件的 source map，便于进行开发调试；不会生成 CSS 文件的 source map。\n * 在生产环境构建时，不会生成 JS 和 CSS 文件的 source map，以提供最佳的构建性能。\n\n\nJS Source Map#\n\nJS 文件的 source map 通过 sourceMap.js 来控制，可以传入 Rspack devtool 选项支持的所有 source map\n格式，设置为 false 为关闭。\n\n比如，如果你需要在所有环境生成高质量的 source map，可以设置为：\n\n\n\n你也可以根据环境来设置不同的 source map 格式：\n\n\n\n\nCSS Source Map#\n\nCSS 文件的 source map 通过 sourceMap.css 来控制，设置为 true 为开启，设置为 false 为关闭。\n\n比如，如果需要生成 CSS 文件的 source map，可以设置为：\n\n","routePath":"/config/build/output.source-map","lang":"zh","toc":[{"text":"默认行为","id":"默认行为","depth":2,"charIndex":201},{"text":"JS Source Map","id":"js-source-map","depth":2,"charIndex":367},{"text":"CSS Source Map","id":"css-source-map","depth":2,"charIndex":554}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"build.polyfill","content":"#\n\n\npolyfill.entryCdn#\n\n * 页面头部引入兼容代码CDN脚本\n * 示例https://unpkg.yy.com/@empjs/polyfill@0.0.1/dist/es.js\n * 兼容代码生成仓库: 代补充\n\n\npolyfill.mode#\n\n * 注入兼容代码\n * 类型： entry | usage | false\n * 默认值： false\n\nTIP\n\nmodule federation 入口 建议使用 entry\n\n\npolyfill.entry#\n\n兼容代码注入到 入口文件里面\n\n\npolyfill.usage#\n\n按需添加兼容代码\n\n\npolyfill.coreJsFeatures#\n\nTIP\n\n选择core-js的兼容版本有助于切换适当的代码体积\n\n * 类型： full | actual | stable | es\n * 默认值： stable\n\n\npolyfill.externalHelpers#\n\n * @swc/helpers 外置\n * 类型：boolean\n * 默认值： false\n\n\npolyfill.browserslist#\n\n * 浏览器 兼容版本\n * 类型：string[]\n * 默认值： ['chrome >= 87', 'edge >= 88', 'firefox >= 78', 'safari >= 14']\n\n","routePath":"/config/build/polyfill","lang":"zh","toc":[{"text":"polyfill.entryCdn","id":"polyfillentrycdn","depth":2,"charIndex":3},{"text":"polyfill.mode","id":"polyfillmode","depth":2,"charIndex":120},{"text":"polyfill.entry","id":"polyfillentry","depth":2,"charIndex":229},{"text":"polyfill.usage","id":"polyfillusage","depth":2,"charIndex":263},{"text":"polyfill.coreJsFeatures","id":"polyfillcorejsfeatures","depth":2,"charIndex":291},{"text":"polyfill.externalHelpers","id":"polyfillexternalhelpers","depth":2,"charIndex":402},{"text":"polyfill.browserslist","id":"polyfillbrowserslist","depth":2,"charIndex":478}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"build.publicDir","content":"#\n\n * 静态文件路径\n * 类型： string\n * 默认值： public\n\n","routePath":"/config/build/publicDir","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"build.sourcemap","content":"#\n\n * 是否生成 sourceMap\n * 类型： boolean\n * 默认值： true\n\n","routePath":"/config/build/sourcemap","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"build.staticDir","content":"#\n\n * 生成包含 js、css、asset 的父目录\n * 类型： string\n * 默认值： ``\n\n","routePath":"/config/build/staticDir","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"build.target","content":"#\n\n * 类型：\n\n\n\n * 默认值： ``\n\n","routePath":"/config/build/target","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"debug配置","content":"#\n\n * 类型\n\n\n\n\ndebug.loggerLevel#\n\n * 控制台日志\n * 类型 debug | info | warn | error\n * 默认 info\n\n\ndebug.clearLog#\n\n * 自动清理控制台日志\n * 类型 boolean\n * 默认 true\n\n\ndebug.progress#\n\n * 项目构建进度\n * 类型 boolean\n * 默认 true\n\n\ndebug.showRsconfig#\n\n * 显示rspack配置\n * 类型 boolean\n * 默认 false\n\n\ndebug.showPerformance#\n\n * 显示性能数据 alpha\n * 类型 boolean\n * 默认 false\n\n\ndebug.newTreeshaking#\n\n * 启用rspack新的构建方案\n * 类型 boolean\n * 默认 true\n\n\ndebug.infrastructureLogging#\n\n * 控制基础架构级别的日志记录\n * 类型 RsConfig['infrastructureLogging']\n * 默认\n\n","routePath":"/config/debug/","lang":"zh","toc":[{"text":"debug.loggerLevel","id":"debugloggerlevel","depth":2,"charIndex":12},{"text":"debug.clearLog","id":"debugclearlog","depth":2,"charIndex":88},{"text":"debug.progress","id":"debugprogress","depth":2,"charIndex":145},{"text":"debug.showRsconfig","id":"debugshowrsconfig","depth":2,"charIndex":199},{"text":"debug.showPerformance","id":"debugshowperformance","depth":2,"charIndex":262},{"text":"debug.newTreeshaking","id":"debugnewtreeshaking","depth":2,"charIndex":330},{"text":"debug.infrastructureLogging","id":"debuginfrastructurelogging","depth":2,"charIndex":398}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"empShare.dts.sync","content":"#\n\nEmpShare\n\nv3.1.4版本后，使用 RspackEmpSharePlugin代替empShare配置。\n\nEmpShare 生产者类型同步\n\n@emp/cli v3.0.0-beta.31 后接入 @module-federation/enhanced 支持 Typescript 的基站 类型同步\n\n\n实例#\n\n\n01.生产者-导出组件与类型#\n\n\n\n\n02.消费者-接收组件与类型#\n\n\n\n\n03.设置类型路径#\n\n\n\n> federation_provider/tsconfig.json 同理\n\n\n注意事项#\n\n使用提示\n\n项目入口不能使用 expose 否则会引起报错\n\n\nignore 类型文件提交到 git#\n\n","routePath":"/config/empShare/dts","lang":"zh","toc":[{"text":"实例","id":"实例","depth":2,"charIndex":159},{"text":"01.生产者-导出组件与类型","id":"01生产者-导出组件与类型","depth":3,"charIndex":165},{"text":"02.消费者-接收组件与类型","id":"02消费者-接收组件与类型","depth":3,"charIndex":185},{"text":"03.设置类型路径","id":"03设置类型路径","depth":3,"charIndex":205},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":260},{"text":"`ignore` 类型文件提交到 `git`","id":"ignore-类型文件提交到-git","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"empShare","content":"#\n\nEmpShare\n\nv3.1.4版本后，使用 RspackEmpSharePlugin代替empShare配置。\n\nEmpShare\n\n基于 module federation 进行二次封装开发、适配更多业务模型\n\n目前支持 基本 module federation的共享方式、基于cdn的共享方式以及ESM的共享方式\n\n\n基础共享配置#\n\n\n\n\nFastMode 共享配置#\n\nFastMode\n\n基于 module federation v2 进行二次封装开发、目前EMP最优的共享模式\n\n\n\n\nCDN共享配置#\n\n\n\n\nESM共享配置#\n\n","routePath":"/config/empShare/","lang":"zh","toc":[{"text":"基础共享配置","id":"基础共享配置","depth":2,"charIndex":164},{"text":"FastMode 共享配置","id":"fastmode-共享配置","depth":2,"charIndex":176},{"text":"CDN共享配置","id":"cdn共享配置","depth":2,"charIndex":252},{"text":"ESM共享配置","id":"esm共享配置","depth":2,"charIndex":265}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"配置总览","content":"#\n\nEMP v3 提供了与 v2 相似的配置项，通过本章节，你可以了解 EMP 配置的使用方式。\n\n当你运行 EMP 的命令行工具时，EMP 会自动读取当前路径下的 emp-config.js 文件。 一个基础的 EMP 配置文件如下所示：\n\n","routePath":"/config/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"host","content":"#\n\nhost配置项类似于Rspack的devServer的host配置项，可用于指定监听的主机名或IP地址。\n\n * 类型： string\n * 默认值: 0.0.0.0\n\nhost是一个ip地址或者一个主机名，在本地服务器启动后，指定ip或者指定主机名可以通过网络访问到项目，当host为默认值(0.0.0.0)时，所有在网络的主机\n都可以访问项目。\n\n在构建项目时，host的值会传递给Rspack的devServer的host配置项作为配置项的值。\n\n\n示例#\n\n\n\n该配置示例表示项目仅允许本地的主机(127.0.0.1)访问。","routePath":"/config/server/host","lang":"zh","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":230}],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"配置","content":"#\n\nEMP 提供了与 webpack 相似的配置项，通过本章节，你可以了解 EMP 配置的使用方式。\n\n\n配置文件#\n\n当你运行 EMP 的命令行工具时，EMP 会自动读取当前路径下的 emp-config.js 文件。\n\n一个基础的 EMP 配置文件如下所示：\n\n","routePath":"/config/server/","lang":"zh","toc":[{"text":"配置文件","id":"配置文件","depth":2,"charIndex":53}],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"open","content":"#\n\nport配置项类似于Rspack的devServer的open配置项，可用于指定项目启动后是否打开浏览器。\n\n * 类型： boolean\n * 默认值: false\n\n当我们希望可以在项目启动后可以自动打开浏览器自动访问项目，我们可以将它配置为true。\n\n> 💡TIP：注意，自动打开的浏览器为系统默认指定的浏览器。\n\n\n示例#\n\n\n\n该配置示例表示在项目启动后可以自动打开浏览器自动访问项目。","routePath":"/config/server/open","lang":"zh","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":166}],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"port","content":"#\n\nport配置项类似于Rspack的devServer的port配置项，可用于指定监听的端口号。\n\n * 类型： number\n * 默认值: 8000\n\nport可指定项目服务监听的端口号，默认监听端口号为8000，即您可以通过 http://主机名或ip地址:端口号 访问项目\n\n\n示例#\n\n\n\n该配置示例表示项目访问的端口号为9002","routePath":"/config/server/port","lang":"zh","toc":[{"text":"示例","id":"示例","depth":2,"charIndex":144}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"Vue2项目","content":"#\n\n在Vue2中，我们准备了三个示例项目作为参考，分别是：\n\n * vue-2-base：基础项目，用于书写通用业务组件对外暴露，它通常是一些项目的基石。\n * vue-2-project：基础项目，用于和其他通用业务组件进行集成，它通常是一些项目的业务逻辑。\n * vue-2-element：基于elemenUI的项目模板，可直接用于业务的研发\n\n> 💡TIP：三个业务的demo仅仅只是部分依赖以及emp的配置不一样，您可以根据您的业务需求进行自由选择或者组合。\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n> 💡TIP：建议您使用nvm来管理node版本，直接执行nvm use 21命令即可完成开发环境设置\n\n\n安装emp⚡#\n\n快速上手\n\n\n项目初始化#\n\n在对项目进行初始化之前，我们先克隆emp仓库，将示例代码拉取到本地。\n\n\n\n> 🚨 如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，因为我们的vue2示例项目都引用了@empjs/cli和@empjs/plugin-vue2的构建产物，两个仓库的源代码在代码根目录下的packa\nges目录下，我们需要构建打包它们。\n\n首先，我们先构建@empjs/cli产物，先进入对应目录：\n\n\n\n然后执行产物构建:\n\n接下来，我们构建@empjs/plugin-vue2产物，进入对应的目录：\n\n\n\n然后执行产物构建:\n\n构建成功后，运行Vue2示例项目的前期准备就完成了🎉。\n\n> 💡TIP：为什么需要@empjs/cli和@empjs/plugin-vue2的构建产物？这是因为在emp项目中，我们的emp配置文件(emp.confi\n> g.js)引用了这两个构建产物的代码，具体代码如下：\n\n\n运行示例项目#\n\n> 🚧注意：在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nvue-2-base#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:9001/进行查看\n\n\nvue-2-project#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:9002/进行查看\n\n\nvue-2-element#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:9003/进行查看\n\n\n目录约定#\n\n","routePath":"/demo/vue2","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":238},{"text":"安装emp⚡","id":"安装emp","depth":3,"charIndex":358},{"text":"项目初始化","id":"项目初始化","depth":3,"charIndex":374},{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":862},{"text":"vue-2-base","id":"vue-2-base","depth":3,"charIndex":923},{"text":"vue-2-project","id":"vue-2-project","depth":3,"charIndex":1002},{"text":"vue-2-element","id":"vue-2-element","depth":3,"charIndex":1084},{"text":"目录约定","id":"目录约定","depth":2,"charIndex":1166}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"Vue3 项目","content":"#\n\n在 Vue3 中，我们提供了两个示例项目供参考：\n\n * vue-3-base：基础项目，用于书写通用业务组件对外暴露，它通常是一些项目的基石。\n * vue-3-project：基础项目，用于和其他通用业务组件进行集成，它通常是一些项目的业务逻辑。\n\n> 💡TIP：两个业务的 demo 仅仅只是部分依赖以及 emp 的配置不一样，你可以根据业务需求进行自由选择或者组合。\n\n\n前期准备#\n\n在开始之前，请确保你已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n> 💡TIP：建议你使用 nvm 来管理 node 版本，直接执行 nvm use 20 命令即可完成开发环境设置\n\n\n安装 emp⚡#\n\n快速上手\n\n\n项目初始化#\n\n在对项目进行初始化之前，我们先克隆 emp 仓库，将示例代码拉取到本地。\n\n\n\n> 🚨 如果你无法拉取项目至本地，请检查你的网络环境或代理设置是否可以访问 github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n\n运行示例项目#\n\n> 🚧 注意：在运行示例项目之前，请确保你已经完成了前期准备，并当前目录处于 emp 仓库的根目录下。\n\n\nvue-3-base#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，你可以访问 http://localhost:9001/ 进行查看。\n\n\nvue-3-project#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，你可以访问 http://localhost:9002/ 进行查看。","routePath":"/demo/vue3","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":193},{"text":"安装 emp⚡","id":"安装-emp","depth":3,"charIndex":319},{"text":"项目初始化","id":"项目初始化","depth":3,"charIndex":336},{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":489},{"text":"vue-3-base","id":"vue-3-base","depth":3,"charIndex":553},{"text":"vue-3-project","id":"vue-3-project","depth":3,"charIndex":635}],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"路径别名","content":"#\n\n路径别名（alias）允许开发者为模块定义别名，以便于在代码中更方便的引用它们。当你想要使用一个简短、易于记忆的名称来代替冗长复杂的路径时，这将非常有用。\n\n例如，假如你在项目中经常引用 src/common/request.ts 模块，你可以为它定义一个别名 @request ，然后在代码中通过\n来引用它，而不需要每次都写出完整的相对路径。 同时，这也允许你将模块移动到不同的位置，而不需要更新代码中的所有 import 语法。\n\n在 EMP 中，您可以通过配置 resolve.alias 来进行路径别名设置。\n\n\n配置#\n\nEMP 提供了 resolve.alias 配置项对路径别名进行设置，具体配置如下：\n\n\n\n按照上述配置设置完后，如果你在代码中引用 @common/Foo.tsx, 则会映射到 <project>/src/common/Foo.tsx 路径上。","routePath":"/guide/advanced/alias","lang":"zh","toc":[{"text":"配置","id":"配置","depth":2,"charIndex":263}],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"环境变量","content":"#\n\nEMP 支持在编译过程中向代码中注入环境变量或表达式，这对于区分运行环境、替换常量值等场景很有帮助。本章节会介绍环境变量的使用方式。\n\n\n默认环境变量#\n\n\nprocess.env.NODE_ENV#\n\n默认情况下，EMP 会自动设置 process.env.NODE_ENV 环境变量，在开发模式为 'development'，生产模式为\n'production'。\n\n你可以在 Node.js 和 client 代码中直接使用 process.env.NODE_ENV。\n\n\n\n在开发环境，以上代码会被编译为：\n\n\n\n在生产环境，以上代码会被编译为：\n\n\n\n在代码压缩过程中，if (false) { ... } 会被识别为无效代码，并被自动移除。\n\n\n命令行工具中快速定义变量#\n\n可以在 npm script 中，快速添加 cli 参数来达到区分环境的目的。\n\n\n-e --env#\n\n\n\n代码里面使用\n\n\n\n\n-ev, --env-vars#\n\n使用 -ev key=value 或 -ev key=value -ev key=value 定义一个或多个环境变量，可以在构建时候使用这些环境变量。\n\n单个变量\n\n\n\n多个变量\n\n\n\n在配置中使用变量\n\n\n\n执行 run dev 控制台输出\n\n\n\n更多环境变量配置，请见配置","routePath":"/guide/advanced/env-vars","lang":"zh","toc":[{"text":"默认环境变量","id":"默认环境变量","depth":2,"charIndex":71},{"text":"process.env.NODE_ENV","id":"processenvnode_env","depth":3,"charIndex":81},{"text":"命令行工具中快速定义变量","id":"命令行工具中快速定义变量","depth":2,"charIndex":331},{"text":"-e --env","id":"-e---env","depth":3,"charIndex":388},{"text":"-ev, --env-vars","id":"-ev---env-vars","depth":3,"charIndex":412}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"模块热更新","content":"#\n\n模块热更新（HMR - hot module\nreplacement）功能会在应用程序运行过程中，替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\n\n * 保留在完全重新加载页面期间丢失的应用程序状态。\n\n * 只更新变更内容，以节省宝贵的开发时间。\n\n * 在源代码中 CSS / JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。\n\n\nHMR 开关#\n\nEMP 已内置了对 HMR 的支持，在开发环境下默认启用。\n\n如果你不需要使用 HMR 能力，可以将 server.hot 设置为 false，此时热更新和 react-refresh 将被禁用，EMP 会自动降级到\nserver.liveReload (是否重新加载页面。当开启 hot 时候该配置项会被关闭。)。\n\n\n\n如果你需要同时禁用 HMR 和 liveReload，可以将 server.hmr 和 server.liveReload 都设置为\nfalse，此时页面上不会发起 Web Socket 请求到 dev server，也不会在文件变更时自动刷新页面。\n\n\n\n\n自定义 HMR URL#\n\n在默认情况下，EMP 使用当前页面的 host 和端口号来拼接 HMR 对应的 WebSocket URL。\n\n当出现 HMR 连接失败的情况时，你可以通过自定义 server.host 和 server.port 配置的方式来指定 WebSocket URL。\n\n\n默认配置#\n\n默认配置如下，EMP 会根据当前页面的 location 自动推导 WebSocket 请求的 URL：\n\n","routePath":"/guide/advanced/hmr","lang":"zh","toc":[{"text":"HMR 开关","id":"hmr-开关","depth":2,"charIndex":217},{"text":"自定义 HMR URL","id":"自定义-hmr-url","depth":2,"charIndex":518},{"text":"默认配置","id":"默认配置","depth":3,"charIndex":666}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"命令行工具","content":"#\n\nEMP 内置了一个轻量的命令行工具，包含 dev、build 等命令。\n\n--------------------------------------------------------------------------------\n\n\nemp -h#\n\n如果你需要查看所有可用的 CLI 命令，请在项目目录中运行以下命令：\n\n\n\n输出如下:\n\n\n\n--------------------------------------------------------------------------------\n\n\nemp dev#\n\nemp dev 命令用于启动一个本地开发服务器，对源代码进行开发环境编译。\n\n\n\n--------------------------------------------------------------------------------\n\n\nemp build#\n\nemp build 命令默认会在 dist/ 目录下构建出可用于生产环境的产物。\n\n\n\n--------------------------------------------------------------------------------\n\n\nemp serve#\n\nemp serve 命令用于构建在本地环境预览的生产版本。\n\n\n\n--------------------------------------------------------------------------------\n\n\nemp dts#\n\nemp dts 命令用于拉取 remote 项目的 d.ts。\n\n\n\n--------------------------------------------------------------------------------\n\n\nemp init#\n\nemp init 命令用于初始化 emp 项目。\n\n","routePath":"/guide/basis/commandLine","lang":"zh","toc":[{"text":"emp -h","id":"emp--h","depth":3,"charIndex":122},{"text":"emp dev","id":"emp-dev","depth":3,"charIndex":261},{"text":"emp build","id":"emp-build","depth":3,"charIndex":395},{"text":"emp serve","id":"emp-serve","depth":3,"charIndex":534},{"text":"emp dts","id":"emp-dts","depth":3,"charIndex":662},{"text":"emp init","id":"emp-init","depth":3,"charIndex":790}],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"使用 CSS Modules","content":"#\n\n\n出现#\n\n我们日常的开发模式是组件化开发，我们希望每个组件都能作为一个独立的模块，即使是样式也应该仅在组件内部生效，不会相互影响。然而，传统的全局 CSS\n往往无法满足这种需求，因为样式之间会相互干扰。为了解决这个问题，CSS Modules 提供了一个合适的解决方案。\n\n\nCSS Modules#\n\nCSS Modules 是一种用于管理 CSS 样式的模块化解决方案。它解决了传统 CSS\n的全局作用域、样式冲突和命名空间污染等问题，提供了局部作用域、类名转换和样式导入等功能，提高了样式的可维护性和可重用性。\n\n\n核心概念#\n\n * 每个 CSS 文件都被视为一个模块，与特定的组件或模块关联。\n * 在编译时，CSS Modules 将 CSS 类名转换为唯一的局部作用域类名。\n * 每个组件都有自己的局部作用域，样式规则只适用于当前组件内部。\n\n\n使用指南#\n\nEMP 内置了 less-loader、postcss-loader、sass-loader 处理 CSS 文件。你可以直接在项目中导入 Less、Sass 或\nScss 文件进行使用。\n\n\n使用示例#\n\n\nReact#\n\n在 React 中启用 CSS Modules，我们只需要使用 [name].module.css 作为样式文件名。\n\n以下文件扩展名的样式文件将被视为 CSS Modules：\n\n * *.module.css\n * *.module.less\n * *.module.sass\n * *.module.scss\n * *.module.styl\n * *.module.stylus\n\n以下是一个简单的示例： 我们将 index.tsx 文件、index.module.scss 文件放在同一文件夹。\n\n在 index.tsx 文件中编写组件：\n\n\n\n在 index.module.scss 文件中编写样式：\n\n\n\n然而，当 React 组件需要添加多个类名时，我们需要将类名放在一个数组中；当我们需要动态添加/移除类名时，我们需要使用条件判断语句进行条件判断。\n\n为了更方便地动态添加/移除类名，我们推荐使用第三方库 classnames 结合 CSS Modules 进行使用。\n\n以下是一个简单的示例：\n\n我们需要安装 classnames：\n\n在 index.tsx 文件中编写组件：\n\n\n\n> 💡TIP：你可以自定义从 classnames 引入的名字\n\n在 index.module.scss 文件中编写样式：\n\n\n\n在根组件中引入 MyComponent 组件：\n\n\n\n\nVue#\n\n.vue 文件中的 style 标签用于定义组件的样式。默认情况下，.vue\n文件中的样式是全局属性，即它们会对整个应用程序产生作用。这意味着，如果你在一个组件中定义了某个样式，它将会影响到其他组件中相同元素的样式。\n\n然而，Vue 也提供了一种作用域样式的方式，即设置 scoped 属性。当你在 style 标签中添加了 scoped\n属性后，样式将仅对当前组件起作用，不会影响其他组件中相同元素的样式。这种方式可以确保组件之间的样式相互隔离，避免样式冲突和意外的样式覆盖。\n\n通过使用 scoped 属性，你可以在Vue组件中轻松地编写样式，而无需担心全局样式的干扰。每个组件都有其独立的样式作用域，使得组件化开发更加灵活和可维护。\n\n同时，lang 属性可用于在 <style> 元素中指定样式代码的语言和编码规则。\n\n以下是一个简单的示例：\n\n创建 components 文件夹，在 MyComponent.vue 文件中编写组件：\n\n\n\n在根组件中引入 MyComponent 组件：\n\n","routePath":"/guide/basis/cssModules","lang":"zh","toc":[{"text":"出现","id":"出现","depth":2,"charIndex":3},{"text":"CSS Modules","id":"css-modules","depth":2,"charIndex":141},{"text":"核心概念","id":"核心概念","depth":2,"charIndex":264},{"text":"使用指南","id":"使用指南","depth":2,"charIndex":384},{"text":"使用示例","id":"使用示例","depth":2,"charIndex":487},{"text":"React","id":"react","depth":3,"charIndex":495},{"text":"Vue","id":"vue","depth":3,"charIndex":1099}],"domain":"","frontmatter":{},"version":""},{"id":44,"title":"引入样式资源","content":"#\n\nEMP 内置多种常用的样式资源处理方式，包括 Sass 预处理器、PostCSS、CSS Modules、CSS 内联和 CSS 压缩。\n\n除此之外，EMP 也提供了多个配置项来自定义样式资源的处理规则。\n\n\n使用 Sass#\n\nEMP目前内置了社区流行的 CSS 预处理器之一：Sass。默认情况下，你不需要对 Sass 进行任何配置。目前您无法对其进行任何配置。\n\n\n使用 PostCSS#\n\nEMP 内置了 PostCSS 来转换 CSS 代码。你可以通过以下方式来配置 PostCSS：\n\n 1. EMP 使用 postcss-load-config 来加载当前项目根目录下的 PostCSS 配置文件，比如：\n\n\n\n 2. 通过 EMP 的 css.postcss 选项来配置 postcss-loader，该选项支持通过函数来修改内置配置，比如：\n\n\n\n当你同时配置 postcss.config.js 文件和 css.postcss 选项时，两者都会生效，并且 css.postcss 的优先级更高。\n\n\n内置 PostCSS 插件#\n\nEMP 内置了 autoprefixer 插件，来自动补齐 CSS 的浏览器前缀。 如果你需要配置目标浏览器，可以使用 browserslist 进行配置。\n\n💡 TIP\n\n如果你的项目中已经注册了 autoprefixer 插件，EMP 不会再次注册 autoprefixer 插件。\n\n\n使用CSS Modules#\n\n请参阅 使用 CSS Modules 章节来了解 CSS Modules 的完整用法。\n\n\nCSS 压缩#\n\n在生产环境构建时， EMP 会将 CSS、JS 等静态资源进行压缩，以达到更好的传输效率。\n\nEMP 默认使用 Rspack 内置的 SwcCssMinimizerRspackPlugin 插件，在生产环境构建时自动压缩 CSS 代码。\n\n\n引用 node_modules 里的样式#\n\n你可以直接引用 node_modules 里的样式文件。\n\n * 在组件中引入:\n   \n   \n\n * 在样式文件中引用：\n   \n   ","routePath":"/guide/basis/cssUsage","lang":"zh","toc":[{"text":"使用 Sass","id":"使用-sass","depth":2,"charIndex":107},{"text":"使用 PostCSS","id":"使用-postcss","depth":2,"charIndex":188},{"text":"内置 PostCSS 插件","id":"内置-postcss-插件","depth":3,"charIndex":462},{"text":"使用CSS Modules","id":"使用css-modules","depth":2,"charIndex":625},{"text":"CSS 压缩","id":"css-压缩","depth":2,"charIndex":687},{"text":"引用 node_modules 里的样式","id":"引用-node_modules-里的样式","depth":2,"charIndex":817}],"domain":"","frontmatter":{},"version":""},{"id":45,"title":"开发服务器","content":"#\n\nEMP 配备了一个内置的开发服务器，旨在提升开发体验。当你执行 emp dev 或 emp serve\n命令时，该服务器将启动，并提供页面预览、路由、模块热更新等功能。\n\n\n页面路由#\n\nEMP 的 Server 提供一套默认的路由约定，并允许用户通过配置项定制。\n\n\n默认行为#\n\n执行 emp dev#\n\nEMP Server 会根据 appEntry 或 entries 配置生成对应的页面路由。\n\n当 appEntry 为 index.ts|x 时，可通过 / 访问页面；当 appEntry 为 info.ts|x 时，可通过 /info 访问该页面。\n\n\n\n\n\n上述配置也可以改为多入口配置，使用entries，此时对应使用 /index.html 与 info.html 访问对应页面\n\n\n\n执行 emp serve#\n\nEMP Server 会根据 build.outDir (默认值为\"dist\")，启动一个本地 http/https 服务，提供文件访问服务。\n\nTIP\n\n你还可以通过 EMP 的 devServer 配置 Server 的行为，详见 Config 总览。","routePath":"/guide/basis/devserver","lang":"zh","toc":[{"text":"页面路由","id":"页面路由","depth":2,"charIndex":89},{"text":"默认行为","id":"默认行为","depth":3,"charIndex":137},{"text":"执行 `emp dev`","id":"执行-emp-dev","depth":4,"charIndex":-1},{"text":"执行 `emp serve`","id":"执行-emp-serve","depth":4,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":46,"title":"配置","content":"#\n\nEMP 支持直接修改 Rspack 配置对象，也支持通过 bundler-chain 的形式来修改 EMP 内置的 Rspack 配置。\n\n\n修改 EMP 配置对象#\n\n你可以在配置文件中，直接修改暴露的EMP配置对象，请查看 配置文档 来了解完整用法。\n\n\n\n\n使用 @empjs/cli 的 defineConfig 函数来配置 EMP。#\n\ndefineConfig 中会带入一个 store 的参数，里面包含构建环境的全局变量信息，请查看 配置文档 来了解完整用法。\n\n\n\n\n使用 chain#\n\nchain 是 webpack-chain 的子集，便于深层，分批次的方式去修改 EMP 中 Rspack 和 webpack 的配置，请查看 配置文档\n来了解完整用法。\n\n\n\n配置 loader#\n\n下面是新增、修改和删除 loader 的示例。\n\n\n\n配置 Plugin#\n\n下面是新增、修改和删除 插件 的示例。\n\n\n\n以上是一些常见的配置示例，完整的 bundler-chain API 请见 webpack-chain 文档。","routePath":"/guide/basis/empconfig","lang":"zh","toc":[{"text":"修改 `EMP` 配置对象","id":"修改-emp-配置对象","depth":2,"charIndex":-1},{"text":"使用 `@empjs/cli` 的 `defineConfig` 函数来配置 `EMP`。","id":"使用-empjscli-的-defineconfig-函数来配置-emp","depth":2,"charIndex":-1},{"text":"使用 `chain`","id":"使用-chain","depth":2,"charIndex":-1},{"text":"配置 loader","id":"配置-loader","depth":4,"charIndex":344},{"text":"配置 Plugin","id":"配置-plugin","depth":4,"charIndex":383}],"domain":"","frontmatter":{},"version":""},{"id":47,"title":"普通引入与inline引入SVG","content":"#\n\n","routePath":"/guide/basis/inline","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":48,"title":"引入 JSON 文件","content":"#\n\nEMP 支持在代码中引用 JSON 文件，也支持引用 YAML 和 TOML 文件并将其转换为 JSON 格式。\n\n\nJSON 文件#\n\n你可以直接在 JavaScript 文件中引用 JSON 文件。\n\n\n\n\n\n\n具名引用#\n\nEMP 同样支持通过 named import 来引用 JSON 文件：\n\n\n\n\nYAML 文件#\n\nYAML 是一种数据序列化语言，通常用于编写配置文件。\n\nEMP 提供了 YAML 插件，在注册插件后，你可以在 JavaScript 中引用 .yaml 或 .yml 文件，它们会被自动转换为 JavaScript\n对象。\n\n\n\n\n\n\nTOML 文件#\n\nTOML 是一种语义明显、易于阅读的配置文件格式。\n\nEMP 提供了 TOML 插件，在注册插件后，你可以在 JavaScript 中引用 .toml 文件，它会被自动转换为 JavaScript 对象。\n\n\n\n\n\n\n类型声明#\n\n当你在 TypeScript 代码中引用 YAML 或 TOML 文件时，请在项目中创建 src/env.d.ts 文件，并添加相应的类型声明。\n\n","routePath":"/guide/basis/json","lang":"zh","toc":[{"text":"JSON 文件","id":"json-文件","depth":2,"charIndex":61},{"text":"具名引用","id":"具名引用","depth":3,"charIndex":110},{"text":"YAML 文件","id":"yaml-文件","depth":2,"charIndex":158},{"text":"TOML 文件","id":"toml-文件","depth":2,"charIndex":287},{"text":"类型声明","id":"类型声明","depth":2,"charIndex":406}],"domain":"","frontmatter":{},"version":""},{"id":49,"title":"构建产物目录","content":"#\n\n本章节主要介绍构建产物的目录结构，以及如何控制不同类型产物的输出目录。\n\n\n默认产物目录#\n\n下面是最基础的产物目录结构，默认情况下，构建产物会生成在当前项目的 dist 目录下。\n\n\n\n最常见的产物是 HTML 文件、JS 文件和 CSS 文件：\n\n * HTML 文件：默认输出到 dist 目录的根部。\n\n * JS 文件：默认输出到 static/js 目录，\n\n * CSS 文件：默认输出到 static/css 目录。\n\n此外，JS 文件和 CSS 文件有时候会生成一些相关产物：\n\n * Source Map 文件：包含保存源代码映射关系，默认输出到 JS 文件和 CSS 文件的同级目录，并添加 .map 后缀。\n   在产物的文件名称中，[name] 表示这个文件对应的入口名称，比如 index, main。[hash] 则是基于该文件的内容生成的哈希值。\n\n\n修改产物目录#\n\n * 通过 output.filename 来修改产物的文件名。\n\n\n静态资源#\n\n当你在代码中引用图片、SVG、字体、媒体等类型的静态资源时，EMP会将其统一输出到 dist/assets 目录下：\n\n","routePath":"/guide/basis/outputFiles","lang":"zh","toc":[{"text":"默认产物目录","id":"默认产物目录","depth":2,"charIndex":40},{"text":"修改产物目录","id":"修改产物目录","depth":2,"charIndex":394},{"text":"静态资源","id":"静态资源","depth":2,"charIndex":438}],"domain":"","frontmatter":{},"version":""},{"id":50,"title":"使用Raw引入与txt","content":"#\n\n","routePath":"/guide/basis/raw","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":51,"title":"使用 Tailwind CSS","content":"#\n\nTailwind CSS 是一个以 Utility Class 为基础的 CSS 框架和设计系统，可以快速地为组件添加常用样式，同时支持主题样式的灵活扩展。\n\n您可以通过 PostCSS 插件来在 EMP 中接入 Tailwind CSS。\n\n\n安装#\n\nEMP内置支持了 postcss 和 autoprefixer ，你只需要安装 tailwindcss ，无须安装其他npm包，调用命令安装：\n\n安装完毕后，使用 Tailwind CSS 所需的依赖安装完毕🎉！\n\n\n配置#\n\n在使用 Tailwind CSS 之前，您可以还需要配置引用 Tailwind CSS 到您的项目中：\n\n * 首先，我们先在项目根目录创建一个 emp-config.js\n\n\n\n * 再次创建 postcss.config.cjs 用于将 Tailwind CSS 注册为 PostCSS 插件，然后在文件中添加如下内容：\n\n\n\n💡 TIP\n\nEMP内置了 autoprefixer ，因此你只需要注册 tailwindcss 插件。在这里，您也可以通过 tools.postcss注册\ntailwindcss 插件。\n\n * 最后，我们创建一个tailwind.config.js文件用于配置Tailwind CSS，并添加如下内容至文件中：\n\n\n\n⚠️ 注意\n\n上述配置仅供参考，具体配置请以实际项目需求为准，例如 vue 项目需要添加 vue 文件，非 TypeScript 项目不需要包含 ts 和 tsx 文件。\n\n\n引入样式#\n\n前面我们已经配置好了 Tailwind CSS ，接下来，我们需要在入口样式文件进行引入，常见的引入情况有 css、scss、less，具体内容如下：\n\n * css：\n   \n   \n\n * scss：\n   \n   \n\n * less：\n   \n   \n\n📢 说明\n\n根据需求不同，您可以选择性地导入 Tailwind CSS 提供的 CSS 样式。请参考 @tailwind 文档 来了解 @tailwind 指令的详细用法。\n\n\n测试#\n\n至此，您已经完成EMP接入 Tailwind CSS 的全部步骤🎊，您可以添加如下代码来测试是否成功：\n\n\n\n更多用法请参考 Tailwind CSS 文档。\n\n\n示例#\n\n对于Tailwind CSS，我们准备了三个框架下的最简示例仅供参考。三个最简示例在 emp 仓库下，请按如下命令安装：\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，运行 Tailwind CSS 示例项目的前期准备就完成了🎉。\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nVue2版本#\n\nVue2 版本的 Tailwind CSS 示例项目在 projects/tailwind-vue2 目录下，我们先进入项目的根目录：\n\n\n\n然后运行构建项目：\n\n最后，您可以在 http://localhost:9002/ 查看示例效果👀。\n\n\nVue3版本#\n\nVue3 版本的 Tailwind CSS 示例项目在 projects/tailwind-vue3 目录下，我们先进入项目的根目录：\n\n\n\n然后运行构建项目：\n\n最后，您可以在 http://localhost:9001/ 查看示例效果👀。\n\n\nReact版本#\n\nReact 版本的 Tailwind CSS 示例项目在 projects/tailwind-react 目录下，我们先进入项目的根目录：\n\n\n\n然后运行构建项目：\n\n最后，您可以在 http://localhost:8000/ 查看示例效果👀。\n\n\nVS Code 插件#\n\nTailwind CSS 提供了 Tailwind CSS IntelliSense 插件，用于在 VS Code 中自动补全 Tailwind CSS 的\nclass names、CSS functions 和 directives。\n\n您可以在 VS Code 中安装该插件，即可开启自动补全功能✅。\n\n\n构建优化#\n\n在使用 Tailwind CSS 时，如果没有正确地配置 tailwind.config.js 中的 content\n字段，可能会导致构建性能和热更新性能下降。这是因为 Tailwind CSS 内部会基于 content 定义的 glob\n来匹配文件，扫描的文件数量越多，产生的性能开销越大😣。\n\n因此，我们建议精确地指定需要扫描的路径，以避免不必要的性能开销。例如，仅包括项目源码中实际包含 Tailwind 类名的 HTML 或 JS\n文件，避免包含不相关的文件或目录，尤其是 node_modules 目录。\n\n下面是一个扫描 node_modules 的错误示例❌：\n\n","routePath":"/guide/basis/tailwind","lang":"zh","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":125},{"text":"配置","id":"配置","depth":2,"charIndex":240},{"text":"引入样式","id":"引入样式","depth":2,"charIndex":661},{"text":"测试","id":"测试","depth":2,"charIndex":888},{"text":"示例","id":"示例","depth":2,"charIndex":976},{"text":"Vue2版本","id":"vue2版本","depth":3,"charIndex":1248},{"text":"Vue3版本","id":"vue3版本","depth":3,"charIndex":1382},{"text":"React版本","id":"react版本","depth":3,"charIndex":1516},{"text":"VS Code 插件","id":"vs-code-插件","depth":2,"charIndex":1653},{"text":"构建优化","id":"构建优化","depth":2,"charIndex":1821}],"domain":"","frontmatter":{},"version":""},{"id":52,"title":"配置HTML模版","content":"\n<% if (htmlWebpackPlugin.options.unsupportedBrowser) { %>\nSorry, your browser is not supported. Please upgrade to the latest version or\nswitch your browser to use this site. See outdatedbrowser.com for options.\n<% } %> <% if (htmlWebpackPlugin.options.appMountId) { %>\n\n<% } %> <% if (htmlWebpackPlugin.options.appMountIds &&\nhtmlWebpackPlugin.options.appMountIds.length > 0) { %> <% for (var index in\nhtmlWebpackPlugin.options.appMountIds) { %>\n\n<% } %> <% } %> <% if (htmlWebpackPlugin.options.window) { %> <% } %> <% for\n(var chunk in htmlWebpackPlugin.files.chunks) { %> <% } %> <% if\n(htmlWebpackPlugin.options.devServer) { %> <% } %> <% if\n(htmlWebpackPlugin.options.googleAnalytics) { %> <% } %>","routePath":"/guide/basis/template","lang":"zh","toc":[{"text":"设置模板文件","id":"设置模板文件","depth":2,"charIndex":-1},{"text":"模板文件示例","id":"模板文件示例","depth":3,"charIndex":-1},{"text":"设置页面标题","id":"设置页面标题","depth":2,"charIndex":-1},{"text":"设置页面语言","id":"设置页面语言","depth":2,"charIndex":-1},{"text":"设置页面meta标签","id":"设置页面meta标签","depth":2,"charIndex":-1},{"text":"设置页面图标","id":"设置页面图标","depth":2,"charIndex":-1},{"text":"设置模板参数","id":"设置模板参数","depth":2,"charIndex":-1},{"text":"模板引擎","id":"模板引擎","depth":2,"charIndex":-1},{"text":"Lodash Template","id":"lodash-template","depth":3,"charIndex":-1},{"text":"EJS文件","id":"ejs文件","depth":3,"charIndex":-1},{"text":"Pug","id":"pug","depth":3,"charIndex":-1},{"text":"注入标签","id":"注入标签","depth":2,"charIndex":-1},{"text":"对象用法","id":"对象用法","depth":3,"charIndex":-1},{"text":"函数用法","id":"函数用法","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":53,"title":"React Cross Version","content":"#\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，运行 projects/react-across 示例项目。\n\n\n运行示例项目#\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nmf-host#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:1800/进行查看。\n\n\n演示效果#\n\n当您的代码运行成功之后，它应该是这样子的🤩：\n\n\n详情请见#\n\nEMP打破React版本枷锁，实现企业级微前端应用","routePath":"/guide/empShare/react-cross-version","lang":"zh","toc":[{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":154},{"text":"mf-host","id":"mf-host","depth":3,"charIndex":215},{"text":"演示效果","id":"演示效果","depth":2,"charIndex":292},{"text":"详情请见","id":"详情请见","depth":2,"charIndex":325}],"domain":"","frontmatter":{},"version":""},{"id":54,"title":"React Multi Version","content":"#\n\ndemo项目仓库 emp:\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，运行 demos/react16_18/react-16-app 示例项目。\n\n\n运行示例项目#\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nmf-host#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:4002/进行查看。\n\n\n演示效果#\n\n当您的代码运行成功之后，它应该是这样子的🤩：\n\n\n项目配置#\n\n\n\n\n核心代码#\n\n\n\nTIP\n\n更多详情见 pluginRspackEmpShare 插件配置。","routePath":"/guide/empShare/react-diff","lang":"zh","toc":[{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":177},{"text":"mf-host","id":"mf-host","depth":3,"charIndex":238},{"text":"演示效果","id":"演示效果","depth":2,"charIndex":315},{"text":"项目配置","id":"项目配置","depth":2,"charIndex":348},{"text":"核心代码","id":"核心代码","depth":2,"charIndex":358}],"domain":"","frontmatter":{},"version":""},{"id":55,"title":"React ESM MF","content":"#\n\ndemo项目仓库 emp:\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，先运行 projects/esm-react-host 示例项目，再运行 projects/esm-react-app 示例项目\n\n\n运行示例项目#\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nmf-host#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n再打开多一个终端，运行:\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:3302/进行查看。\n\n\n演示效果#\n\n当您的代码运行成功之后，它应该是这样子的🤩：\n\n当前esm支持基础库使用浏览器原生ESM方式引入。需要开启配置:\n\n\n\n并在empShare.shareLib中配置对应的原生importmap配置。","routePath":"/guide/empShare/react-esm","lang":"zh","toc":[{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":203},{"text":"mf-host","id":"mf-host","depth":3,"charIndex":264},{"text":"演示效果","id":"演示效果","depth":2,"charIndex":366}],"domain":"","frontmatter":{},"version":""},{"id":56,"title":"React MF","content":"#\n\n在React中，我们准备了两个进阶示例项目作为参考，分别是：\n\n * runtime-18-host：基础项目，用于书写通用业务组件对外暴露，它通常是一些项目的基石。\n * runtime-18-app：基础项目，用于和其他通用业务组件进行集成，它通常是一些项目的业务逻辑。\n\n详情另见项目仓库\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置\n\n\n拉取项目仓库#\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n\n安装依赖#\n\n安装完依赖后，运行 React 示例项目的前期准备就完成了🎉。\n\n\n运行示例项目#\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nReact18 demo#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以访问http://localhost:1801/进行查看。\n\n⚠️ 注意\n\n若1801端口被占用，那么启动的服务可能会使用其他端口，详情请留意控制台的输出日志。\n\n演示效果#\n\n当您的代码运行成功之后，它应该是这样子的🤩：\n\n\n配置讲解#\n\n\nruntime-18-app#\n\n示例项目根目录：\n\n\n\n\nEMP项目配置#\n\nemp.config.ts配置如下:\n\npluginRspackEmpShare plugins#\n\npluginRspackEmpShare 是新增的EMP插件，主要用来配置Module Federation Runtime的公共依赖 runtimeLib\n，以及公共的框架依赖frameworkLib。插件详情\n\nbuild.polyfill.entryCdn#\n\nEMP 3.1.5及以后版本新增依赖，这里提供配置在页面头部加载兼容行脚本，以便减少入口包体积以及CDN缓存复用。配置详情\n\n\n远程模块注册与加载#\n\nsrc/App.tsx代码如下:\n\n代码中分别引入reactAdapter与 @empjs/share/runtime\n\n\n\n通过使用 @empjs/share/runtime 的 init 与 register 函数，达到 初始化远程模块 与 增量注册远程模块 的目的。其中\nreactAdapter 提供了 module federation 共享的share配置。\n\n注册模块后，使用 @empjs/share/runtime 的 load 函数，加载模块中的组件，达到使用远程模块的目的。\n\nTIP\n\n@empjs/share/runtime 提供了远程模块运行时注册的能力，所以在 emp.config.ts 中无需再使用 module federation\nplugin 。如果当前项目不需要暴露远程模块，那么入口的异步边界import()也可以移除。\n\nTIP\n\n更多详情见 pluginRspackEmpShare 插件配置。","routePath":"/guide/empShare/react","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":152},{"text":"拉取项目仓库","id":"拉取项目仓库","depth":3,"charIndex":272},{"text":"安装依赖","id":"安装依赖","depth":3,"charIndex":352},{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":394},{"text":"React18 demo","id":"react18-demo","depth":3,"charIndex":455},{"text":"演示效果","id":"演示效果","depth":4,"charIndex":587},{"text":"配置讲解","id":"配置讲解","depth":2,"charIndex":620},{"text":"runtime-18-app","id":"runtime-18-app","depth":2,"charIndex":628},{"text":"EMP项目配置","id":"emp项目配置","depth":3,"charIndex":658},{"text":"pluginRspackEmpShare plugins","id":"pluginrspackempshare-plugins","depth":4,"charIndex":688},{"text":"build.polyfill.entryCdn","id":"buildpolyfillentrycdn","depth":4,"charIndex":827},{"text":"远程模块注册与加载","id":"远程模块注册与加载","depth":3,"charIndex":917}],"domain":"","frontmatter":{},"version":""},{"id":57,"title":"Vue2 MF","content":"#\n\n在Vue2中，我们准备了两个进阶示例项目作为参考，分别是：\n\n * vue-2-base：基础项目，用于书写通用业务组件对外暴露，它通常是一些项目的基石。\n * vue-2-project：应用项目，用于和其他通用业务组件进行集成，它通常是一些项目的业务逻辑。\n\n💡 TIP\n\n两个业务的demo仅仅只是部分依赖以及emp的配置不一样，您可以根据您的业务需求进行自由选择或者组合。\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置\n\n\n安装emp⚡#\n\n具体操作步骤请参考快速上手\n\n\n项目初始化#\n\n在对项目进行初始化之前，我们先克隆emp仓库，将示例代码拉取到本地。\n\n\n\n🚨 可能遇到的错误\n\n如果您无法拉取项目至本地，请检查您的网络环境或代理设置是否可以访问github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n安装完依赖后，运行Vue2示例项目的前期准备就完成了🎉。\n\n\n运行示例项目#\n\n⚠️ 注意\n\n在运行示例项目之前，请确保您已经完成了前期准备，并当前目录处于emp仓库的根目录下。\n\n\nvue2 demo#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以分别访问http://localhost:9001/ 与 http://localhost:9002/进行查看。\n\n演示效果#\n\n:9001 基站效果：\n\n:9002 应用效果：\n\n\n远程组件调用#\n\n\n\n\n项目配置#\n\n\n\n\n\n\n常见问题#\n\n\n使用yarn无法启动项目，缺失部分module#\n\n在Vue项目中，我们使用了 @empjs/plugin-vue2 和 @empjs/plugin-vue3\n两个插件，在实际开发中，我们注意到了这个模块缺失导致的问题。 这是因为在这两个插件中，我们引用了 vue-loader 这个依赖，而这个依赖又依赖于\nwebpack， 由于yarn的包管理机制，我们无法在高版本的Node版本下安装 webpack 的低版本，所以导致了这一问题的发生。\n\n目前对于这个问题的解决，我们提供了两种方案进行选择：\n\n * 使用 pnpm\n   包管理器解决这一问题。由于pnpm在这种情况下，会自动将webpack安装更为适合当前node版本的版本，而不是抛出警告然后不安装它，所以使用pnpm可以\n   完美解决这一问题。\n\n * 如果你想继续使用yarn，您可以手动安装 webpack 这一依赖，具体安装命令如下：\n   \n   \n\n如果您在npm中遇到类似的问题，您也可以尝试这两个方案进行解决。","routePath":"/guide/empShare/vue2","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":196},{"text":"安装emp⚡","id":"安装emp","depth":3,"charIndex":316},{"text":"项目初始化","id":"项目初始化","depth":3,"charIndex":341},{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":529},{"text":"vue2 demo","id":"vue2-demo","depth":3,"charIndex":590},{"text":"演示效果","id":"演示效果","depth":4,"charIndex":695},{"text":"远程组件调用","id":"远程组件调用","depth":3,"charIndex":729},{"text":"项目配置","id":"项目配置","depth":3,"charIndex":741},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":753},{"text":"使用yarn无法启动项目，缺失部分module","id":"使用yarn无法启动项目缺失部分module","depth":3,"charIndex":761}],"domain":"","frontmatter":{},"version":""},{"id":58,"title":"Vue3 MF","content":"#\n\n在 Vue3 中，我们提供了两个示例项目供参考：\n\n * vue3-base：基础项目，用于书写通用业务组件对外暴露，它通常是一些项目的基石。\n * vue3-project：基础项目，用于和其他通用业务组件进行集成，它通常是一些项目的业务逻辑。\n\n> 💡TIP：两个业务的 demo 仅仅只是部分依赖以及 emp 的配置不一样，你可以根据业务需求进行自由选择或者组合。\n\n\n前期准备#\n\n在开始之前，请确保你已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n> 💡TIP：建议你使用 nvm 来管理 node 版本，直接执行 nvm use 20 命令即可完成开发环境设置\n\n\n安装 emp⚡#\n\n快速上手\n\n\n项目初始化#\n\n在对项目进行初始化之前，我们先克隆 emp 仓库，将示例代码拉取到本地。\n\n\n\n> 🚨 如果你无法拉取项目至本地，请检查你的网络环境或代理设置是否可以访问 github，如果仍不能解决，请联系我们。\n\n在拉取完成代码后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n\n运行示例项目#\n\n> 🚧 注意：在运行示例项目之前，请确保你已经完成了前期准备，并当前目录处于 emp 仓库的根目录下。\n\n\nvue3 demo#\n\n首先进入示例项目的根目录：\n\n\n\n然后运行代码：\n\n运行成功后，您可以分别访问http://localhost:9302/ 与 http://localhost:9301/进行查看。\n\n演示效果#\n\n:9301 基站效果：\n\n:9302 应用效果：\n\n\n远程组件调用#\n\n\n\n\n项目配置#\n\n\n\n\n\n\n常见问题#\n\n\n使用yarn无法启动项目，缺失部分module#\n\n在Vue项目中，我们使用了 @empjs/plugin-vue2 和 @empjs/plugin-vue3\n两个插件，在实际开发中，我们注意到了这个模块缺失导致的问题。 这是因为在这两个插件中，我们引用了 vue-loader 这个依赖，而这个依赖又依赖于\nwebpack， 由于yarn的包管理机制，我们无法在高版本的Node版本下安装 webpack 的低版本，所以导致了这一问题的发生。\n\n目前对于这个问题的解决，我们提供了两种方案进行选择：\n\n * 使用 pnpm\n   包管理器解决这一问题。由于pnpm在这种情况下，会自动将webpack安装更为适合当前node版本的版本，而不是抛出警告然后不安装它，所以使用pnpm可以\n   完美解决这一问题。\n\n * 如果你想继续使用yarn，您可以手动安装 webpack 这一依赖，具体安装命令如下：\n   \n   \n\n如果您在npm中遇到类似的问题，您也可以尝试这两个方案进行解决。","routePath":"/guide/empShare/vue3","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":191},{"text":"安装 emp⚡","id":"安装-emp","depth":3,"charIndex":317},{"text":"项目初始化","id":"项目初始化","depth":3,"charIndex":334},{"text":"运行示例项目","id":"运行示例项目","depth":2,"charIndex":487},{"text":"vue3 demo","id":"vue3-demo","depth":3,"charIndex":551},{"text":"演示效果","id":"演示效果","depth":4,"charIndex":656},{"text":"远程组件调用","id":"远程组件调用","depth":3,"charIndex":690},{"text":"项目配置","id":"项目配置","depth":3,"charIndex":702},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":714},{"text":"使用yarn无法启动项目，缺失部分module","id":"使用yarn无法启动项目缺失部分module","depth":3,"charIndex":722}],"domain":"","frontmatter":{},"version":""},{"id":59,"title":"React","content":"#\n\n在这篇文档中，你可以了解到如何基于 Emp 来构建一个 React 应用。\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置\n\n\n创建 React 项目#\n\n你可以使用 create-emp 来创建一个 Emp + React 的项目，调用以下命令：\n\n然后在 Select framework 时选择 React 即可。\n\n\n安装依赖#\n\n在创建完项目后，我们进入代码的根目录，安装项目依赖，推荐使用PNPM进行安装：\n\n\n运行 React 项目#\n\n在安装完项目依赖后，启动项目：\n\n运行成功后，您可以访问http://localhost:8000/进行查看\n\n\n目录约定#\n\n","routePath":"/guide/framework/react","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":42},{"text":"创建 React 项目","id":"创建-react-项目","depth":2,"charIndex":162},{"text":"安装依赖","id":"安装依赖","depth":2,"charIndex":261},{"text":"运行 React 项目","id":"运行-react-项目","depth":2,"charIndex":310},{"text":"目录约定","id":"目录约定","depth":2,"charIndex":381}],"domain":"","frontmatter":{},"version":""},{"id":60,"title":"Vue2","content":"#\n\n在这篇文档中，你可以了解到如何基于 Emp 来构建一个 Vue2 应用。\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置\n\n\n创建项目#\n\nemp支持使用脚手架创建Vue2项目,我们使用create-emp来创建一个 Emp + Vue2 的项目，调用命令如下：\n\n输入命令后，首先会提示你输入项目文件夹名称，根据您的需求输入设置即可，接下来在Select framework时选择Vue2即可创建一个全新的Vue2\nEmp项目🎉。\n\n\n运行项目#\n\n💡 TIP\n\n建议使用您对应创建项目时使用的包管理器执行后续的命令，推荐使用PNPM作为您项目的包管理器。\n\n由于初始的项目不包含项目所需要的依赖，所以在运行项目之前，您需要安装所必须的所有依赖，调用命令：\n\n安装完依赖后，您可以直接调用如下命令运行项目：\n\n接下来Emp会极速为您构建运行项目⚡，最后访问http://localhost:9002/即可查看项目运行的效果。\n\n\n目录约定#\n\n\n\n\n常见问题#\n\n\n项目没有html模板，我需要更改项目icon怎么办？#\n\n默认项目的icon为React的icon，我们有两种方法更改项目的icon：\n\n * 参考 设置页面图标 进行配置 配置完毕后，重新启动您项目即可查看到您的更改🔧。\n\n * 参考 设置页面模板 进行配置 配置完毕后，重新启动您项目即可查看到您的更改🔧。\n\n\n使用yarn无法启动项目，缺失部分module#\n\n在Vue项目中，我们使用了 @empjs/plugin-vue2 和 @empjs/plugin-vue3\n两个插件，在实际开发中，我们注意到了这个模块缺失导致的问题。 这是因为在这两个插件中，我们引用了 vue-loader 这个依赖，而这个依赖又依赖于\nwebpack， 由于yarn的包管理机制，我们无法在高版本的Node版本下安装 webpack 的低版本，所以导致了这一问题的发生。\n\n目前对于这个问题的解决，我们提供了两种方案进行选择：\n\n * 使用 pnpm\n   包管理器解决这一问题。由于pnpm在这种情况下，会自动将webpack安装更为适合当前node版本的版本，而不是抛出警告然后不安装它，所以使用pnpm可以\n   完美解决这一问题。\n\n * 如果你想继续使用yarn，您可以手动安装 webpack 这一依赖，具体安装命令如下：\n   \n   \n\n如果您在npm中遇到类似的问题，您也可以尝试这两个方案进行解决。","routePath":"/guide/framework/vue2","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":41},{"text":"创建项目","id":"创建项目","depth":2,"charIndex":161},{"text":"运行项目","id":"运行项目","depth":2,"charIndex":318},{"text":"目录约定","id":"目录约定","depth":2,"charIndex":516},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":526},{"text":"项目没有html模板，我需要更改项目icon怎么办？","id":"项目没有html模板我需要更改项目icon怎么办","depth":3,"charIndex":534},{"text":"使用yarn无法启动项目，缺失部分module","id":"使用yarn无法启动项目缺失部分module","depth":3,"charIndex":694}],"domain":"","frontmatter":{},"version":""},{"id":61,"title":"Vue3","content":"#\n\n在这篇文档中，你可以了解到如何基于 Emp 来构建一个 Vue3 应用。\n\n\n前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置\n\n\n创建 Vue3 项目#\n\n你可以使用 create-emp 来创建一个 Emp + Vue3 的项目，调用以下命令：\n\n然后在 Select framework 时选择 Vue 3 即可。\n\n\n安装依赖#\n\n在创建完项目后，我们进入代码的根目录，安装项目依赖，推荐使用 PNPM 进行安装：\n\n\n运行 Vue3 项目#\n\n在安装完项目依赖后，启动项目：\n\n运行成功后，你可以访问 http://localhost:8000/ 进行查看。\n\n\n目录约定#\n\n\n\n\n常见问题#\n\n\n使用yarn无法启动项目，缺失部分module#\n\n在Vue项目中，我们使用了 @empjs/plugin-vue2 和 @empjs/plugin-vue3\n两个插件，在实际开发中，我们注意到了这个模块缺失导致的问题。 这是因为在这两个插件中，我们引用了 vue-loader 这个依赖，而这个依赖又依赖于\nwebpack， 由于yarn的包管理机制，我们无法在高版本的Node版本下安装 webpack 的低版本，所以导致了这一问题的发生。\n\n目前对于这个问题的解决，我们提供了两种方案进行选择：\n\n * 使用 pnpm\n   包管理器解决这一问题。由于pnpm在这种情况下，会自动将webpack安装更为适合当前node版本的版本，而不是抛出警告然后不安装它，所以使用pnpm可以\n   完美解决这一问题。\n\n * 如果你想继续使用yarn，您可以手动安装 webpack 这一依赖，具体安装命令如下：\n   \n   \n\n如果您在npm中遇到类似的问题，您也可以尝试这两个方案进行解决。","routePath":"/guide/framework/vue3","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":41},{"text":"创建 Vue3 项目","id":"创建-vue3-项目","depth":2,"charIndex":161},{"text":"安装依赖","id":"安装依赖","depth":2,"charIndex":258},{"text":"运行 Vue3 项目","id":"运行-vue3-项目","depth":2,"charIndex":309},{"text":"目录约定","id":"目录约定","depth":2,"charIndex":382},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":392},{"text":"使用yarn无法启动项目，缺失部分module","id":"使用yarn无法启动项目缺失部分module","depth":3,"charIndex":400}],"domain":"","frontmatter":{},"version":""},{"id":62,"title":"产物体积优化","content":"#","routePath":"/guide/optimize/productVolume","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":63,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/guide/start/default_template","lang":"zh","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use Component","id":"use-component","depth":2,"charIndex":198},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1711}],"domain":"","frontmatter":{},"version":""},{"id":64,"title":"术语表","content":"#\n\n该索引列出了整个 EMP 生态系统中的常用术语。\n\n\nasset（静态资源）#\n\n静态资源是对 图像、字体、视频等静态文件的统称。这些文件通常会最终输出为单独的文件，而不是打包到代码块中，但是通过其也可以转换成 base64 内联到代码块中\n\n\nasset module（资源模块）#\n\nAsset 模块是一种特殊的模块类型，用来处理静态资源，例如图片、字体、视频等。\n\n\nbundle splitting#\n\nBundle splitting 是一种允许你将代码拆分或合并到多个 bundle 的技术，这对于并行请求和更好的浏览器缓存很有用，它不用于减少初始化\nbundle 的大小。\n\n\nchunk#\n\nChunk 是一组绑定在一起的模块。EMP 会将相互关联的模块打包成一个 chunk，然后生成对应的文件。\n\n\nchunk graph（chunk 图）#\n\nchunk 图是一种表示块之间关系的数据结构。它是一个有向图，图中的每个节点代表一个块，每条边代表块之间的依赖关系。\n\n\ncode splitting#\n\nCode splitting\n是一种技术，它允许你将你的代码拆分成多个块，并且只在应用程序运行时加载必要的块。这可以帮助你减少初始包的大小，加快应用程序的加载时间。\n\n\nfirst class module type（一等公民模块类型）#\n\nEMP 中的一等公民模块指的是那些不需要依赖 loader 和 plugin 即可支持的模块类型，例如 JavaScript、CSS、JSON 等，而像\nHTML、Markdown、YAML 等需要依赖 loader 和 plugin 才能支持的模块类型则不是一等公民模块。\n\n\nloader#\n\nLoader 是用来转换模块内容的。例如，我们可以使用 loader 将 TypeScript 模块转化为 JavaScript 模块，或者将 CSS\n模块转化为 JavaScript 模块，将 CSS 注入到页面中。\n\n\nmodule（模块）#\n\n模块允许你将应用拆分为多个文件，并且在这些文件可以通过导入和导出进行模块内容的共享和复用，这可以帮助你将代码组织成独立的部分，并使用良好的接口在彼此间进行通信。\n\n\nmodule type（模块类型）#\n\n模块类型是模块的一种属性，它们可以通过不同的方式进行解析和处理。我们可以通过指明模块的模块类型来告诉 EMP 如何处理它们。例如，我们可以通过指定模块类型为\nJavaScript 来告诉 EMP 该模块是一个 JavaScript 模块，然后 EMP 就会使用 JavaScript\n解析器来解析该模块，如果指定的模块类型为 CSS，那么 EMP 就会使用 CSS 解析器来解析该模块。\n\n\nmodule resolution（模块解析）#\n\n模块解析是指 EMP 如何找到模块的过程。EMP 会根据模块的路径来解析模块，例如，当我们在代码中使用 import 'foo' 时，EMP\n就会根据模块的路径来解析模块。\n\n\nmodule graph | dependency graph（模块图 | 依赖图）#\n\n模块图是一种表示模块之间关系的数据结构。它是一个有向图，图中的每个节点代表一个模块，每条边代表模块之间的依赖关系。\n\n\nNAPI-RS#\n\nNAPI-RS 是一个在 Rust 中构建预编译的 Node.js 插件的框架。它通过提供 Node-API 的高级抽象，简化了创建和发布本地 Node.js\n附加组件的过程。\n\n\nplugin（插件）#\n\n插件可以用来扩展 EMP 的功能。它可以用来定制构建过程，或与其他工具集成。EMP 提供了很多钩子，你可以用它们来定制构建过程。\n\n\ntree shaking#\n\nTree shaking 是一种允许你从包中删除未使用代码的技术。它是一种特殊的死代码优化方式。像 EMP\n这样的编译器将通过分析代码的静态语法，然后删除未使用的代码来完成此操作。","routePath":"/guide/start/glossary","lang":"zh","toc":[{"text":"asset（静态资源）","id":"asset静态资源","depth":2,"charIndex":29},{"text":"asset module（资源模块）","id":"asset-module资源模块","depth":2,"charIndex":125},{"text":"bundle splitting","id":"bundle-splitting","depth":2,"charIndex":189},{"text":"chunk","id":"chunk","depth":2,"charIndex":298},{"text":"chunk graph（chunk 图）","id":"chunk-graphchunk-图","depth":2,"charIndex":362},{"text":"code splitting","id":"code-splitting","depth":2,"charIndex":446},{"text":"first class module type（一等公民模块类型）","id":"first-class-module-type一等公民模块类型","depth":2,"charIndex":548},{"text":"loader","id":"loader","depth":2,"charIndex":724},{"text":"module（模块）","id":"module模块","depth":2,"charIndex":845},{"text":"module type（模块类型）","id":"module-type模块类型","depth":2,"charIndex":941},{"text":"module resolution（模块解析）","id":"module-resolution模块解析","depth":2,"charIndex":1157},{"text":"module graph | dependency graph（模块图 | 依赖图）","id":"module-graph--dependency-graph模块图--依赖图","depth":2,"charIndex":1272},{"text":"NAPI-RS","id":"napi-rs","depth":2,"charIndex":1377},{"text":"plugin（插件）","id":"plugin插件","depth":2,"charIndex":1478},{"text":"tree shaking","id":"tree-shaking","depth":2,"charIndex":1558}],"domain":"","frontmatter":{},"version":""},{"id":65,"title":"介绍","content":"#\n\nEMP是一个基于Rspack、Module Federation与Typescript，聚焦高性能与微前端的工程化解决方案。\n\n\n为什么要做 EMP#\n\n我们创建EMP的原因是要解决在团队维护构建工具时遇到的各种性能问题。由于团队内部存在许多巨石应用，它们都具有复杂的构建配置，经过EMP²性能提升后，生产环境构建\n还需要耗费好几分钟；开发环境的耗时也超过一分钟以上。\n\n我们在 Webpack 上尝试了多种方法来优化这些巨石应用，但是效果甚微。我们意识到在 Webpack\n上的优化已经难以为继，必须要从底层改造，才能适应我们的需求。\n\n相对应EMP之前的版本，EMP从webpack切换到rspack(基于Rust的高性能构建引擎)，来构建JS。通过新算法减少产物体积，node构建环境做了升级，\n目前使用nodejs 20lts，20以前的版本不再维护。\n\n\nEMP目前的状态#\n\n目前EMP已经处于发布状态，已经落地在团队线上项目之中，经过多个项目与EMP2比对，目前首次构建速度提升约28%，二次构建速度提升约45%，产物包体积缩小24%\n以上。\n\n\nEMP的未来#\n\n微组件共享适配更多业务场景，如老项目不需要改造情况下接入新项目。对于现代浏览器模块化方案进一步适配，浏览器按需加载与本地开发服务按需构建。\n\n\n持续提升性能#\n\n探索更高性能的并发/多核友好的算法，探索更高性能的缓存方案，探索更高性能的插件通信方案等等。\n\n\n和更多团队伙伴合作#\n\n在团队内部，EMP已经落地了多个项目，目前正在和更多团队伙伴合作，希望 EMP 能够成为更多团队的标配。","routePath":"/guide/start/","lang":"zh","toc":[{"text":"为什么要做 EMP","id":"为什么要做-emp","depth":2,"charIndex":67},{"text":"EMP目前的状态","id":"emp目前的状态","depth":2,"charIndex":385},{"text":"EMP的未来","id":"emp的未来","depth":2,"charIndex":483},{"text":"持续提升性能","id":"持续提升性能","depth":3,"charIndex":564},{"text":"和更多团队伙伴合作","id":"和更多团队伙伴合作","depth":3,"charIndex":622}],"domain":"","frontmatter":{},"version":""},{"id":66,"title":"快速开始","content":"#\n\n\n环境准备#\n\n在开始使用前，你需要安装 Node.js，并保证 Node.js 版本 >= 20，我们推荐使用 Node.js 20 的 LTS 版本。\n\n你可以通过以下命令检查当前使用的 Node.js 版本：\n\n\n\n如果你当前的环境中尚未安装 Node.js，或是安装的版本过低，可以通过 nvm 或 fnm 安装需要的版本。\n\n下面是通过 nvm 安装 Node.js 20 LTS 版本的例子：\n\n\n\n\n创建 EMP 项目#\n\n你可以使用 create-emp 来创建一个 EMP 项目，调用以下命令：\n\n然后按照提示操作即可，你可以选择 create-emp 提供的下列模板：\n\n模板      描述         可选功能\nreact   React 18   TypeScript\nvue3    Vue 3      TypeScript\nvue2    Vue 2      TypeScript\n\n\n命令行工具#\n\nEMP CLI 内置了一个轻量的命令行工具，包含 dev、build 等命令。\n\n\n\n请参考 [CLI 工具] 来了解所有可用的命令以及选项。\n\n\n入口模块#\n\nEMP CLI 默认会使用 src/index.(js|ts|jsx|tsx) 作为入口模块，你可以使用 [entry] 配置项来修改入口模块。","routePath":"/guide/start/quick-start","lang":"zh","toc":[{"text":"环境准备","id":"环境准备","depth":2,"charIndex":3},{"text":"创建 EMP 项目","id":"创建-emp-项目","depth":2,"charIndex":209},{"text":"命令行工具","id":"命令行工具","depth":2,"charIndex":414},{"text":"入口模块","id":"入口模块","depth":2,"charIndex":496}],"domain":"","frontmatter":{},"version":""},{"id":67,"title":"从EMP2升级到EMP3","content":"#\n\n\n背景#\n\nEMP3已经处于发布状态并落地在线上项目之中，经过多项目与EMP2比对，首次构建速度提升80%，二次构建速度提升60%，产物包体积缩小25%以上。\n\n\n升级步骤#\n\n\n1.卸载 @efox/emp#\n\nTIP\n\n项目存在的其他 @efox/xxx 依赖，都可以一并移除。\n\n\n2.安装 @empjs/cli#\n\n\n3.修改 package.json#\n\nEMP3 建议使用 ESM 模块系统，在package.json中添加如下配置\n\n\n\n\n4.修改 emp-config.js#\n\nTIP\n\n配置文件名也可以使用 typescript emp.config.ts文件\n\n4.1 模块引入格式调整#\n\nEMP2.x的配置默认使用 commonjs 模块规范，升级 EMP3 首要是把commonjs的模块引用方式修改为ESM的引用方式，则 require 和\nmodule.exports 或 exports 改为 import 与 export 或 export default\n\n4.2 模块返回结果调整#\n\nEMP3配置需要返回 defineConfig 函数的执行结果，调整如下:\n\n\n\n详细配置可以参考 DEMO，其中用到的相关插件可以在 插件 中查看使用说明。","routePath":"/guide/start/upgrade","lang":"zh","toc":[{"text":"背景","id":"背景","depth":2,"charIndex":3},{"text":"升级步骤","id":"升级步骤","depth":2,"charIndex":84},{"text":"1.卸载 `@efox/emp`","id":"1卸载-efoxemp","depth":3,"charIndex":-1},{"text":"2.安装 `@empjs/cli`","id":"2安装-empjscli","depth":3,"charIndex":-1},{"text":"3.修改 `package.json`","id":"3修改-packagejson","depth":3,"charIndex":-1},{"text":"4.修改 `emp-config.js`","id":"4修改-emp-configjs","depth":3,"charIndex":-1},{"text":"4.1 模块引入格式调整","id":"41-模块引入格式调整","depth":4,"charIndex":294},{"text":"4.2 模块返回结果调整","id":"42-模块返回结果调整","depth":4,"charIndex":450}],"domain":"","frontmatter":{},"version":""},{"id":68,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/hello","lang":"zh","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":70,"title":"配置对照","content":"#\n\n> 结合 webpack chain通过this.store.chainName 可以获取相关配置名,也可以手动根据下面提供名称进行配置 如:\n\n\n\n\n参考配置#\n\n","routePath":"/plugin/chainName","lang":"zh","toc":[{"text":"参考配置","id":"参考配置","depth":2,"charIndex":78}],"domain":"","frontmatter":{},"version":""},{"id":71,"title":"Biome 格式化插件","content":"#\n\n\n安装插件#\n\n\n配置插件#\n\n\n\n\nvscode 建议配置#\n\n\n\n💡 TIP\n\n在根目录 .npmrc 加入 public-hoist-pattern[]=*@biomejs/biome*\n\n\nbiome 常用指令#\n\n","routePath":"/plugin/code/biome-config","lang":"zh","toc":[{"text":"安装插件","id":"安装插件","depth":3,"charIndex":3},{"text":"配置插件","id":"配置插件","depth":3,"charIndex":11},{"text":"vscode 建议配置","id":"vscode-建议配置","depth":3,"charIndex":21},{"text":"biome 常用指令","id":"biome-常用指令","depth":3,"charIndex":102}],"domain":"","frontmatter":{},"version":""},{"id":72,"title":"React Eslint 格式化插件","content":"#\n\n\n安装插件#\n\n\n配置插件#\n\n\n\n\nvscode 建议配置#\n\n\n\n💡 TIP\n\n在vscode中，需要搭配VS Code ESLint extension使用，无需安装Prettier Formatter for Visual Studio\nCode。","routePath":"/plugin/code/eslint-config-react","lang":"zh","toc":[{"text":"安装插件","id":"安装插件","depth":3,"charIndex":3},{"text":"配置插件","id":"配置插件","depth":3,"charIndex":11},{"text":"vscode 建议配置","id":"vscode-建议配置","depth":3,"charIndex":21}],"domain":"","frontmatter":{},"version":""},{"id":73,"title":"React 构建插件","content":"#\n\n\n安装插件#\n\n\n配置插件#\n\n\n\n\nReact HMR#\n\n\n\n\nReact SVGR#\n\n\n\n自定义配置\n\n","routePath":"/plugin/framework/plugin-react","lang":"zh","toc":[{"text":"安装插件","id":"安装插件","depth":2,"charIndex":3},{"text":"配置插件","id":"配置插件","depth":2,"charIndex":11},{"text":"React HMR","id":"react-hmr","depth":2,"charIndex":21},{"text":"React SVGR","id":"react-svgr","depth":2,"charIndex":36}],"domain":"","frontmatter":{},"version":""},{"id":74,"title":"Vue v2 构建插件","content":"#\n\n\n安装插件#\n\n\n配置插件#\n\n","routePath":"/plugin/framework/plugin-vue2","lang":"zh","toc":[{"text":"安装插件","id":"安装插件","depth":2,"charIndex":3},{"text":"配置插件","id":"配置插件","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":75,"title":"Vue v3 构建插件","content":"#\n\n\n安装插件#\n\n\n配置插件#\n\n","routePath":"/plugin/framework/plugin-vue3","lang":"zh","toc":[{"text":"安装插件","id":"安装插件","depth":2,"charIndex":3},{"text":"配置插件","id":"配置插件","depth":2,"charIndex":11}],"domain":"","frontmatter":{},"version":""},{"id":76,"title":"插件总览","content":"#\n\n> 通过emp-config.js中通过plugins选项来注册插件\n\n> 可以参考配置如下:\n\n","routePath":"/plugin/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":77,"title":"EMP 项目构建工具","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n配置#\n\n\n\n\n指令#\n\n","routePath":"/plugin/tool/cli","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"配置","id":"配置","depth":3,"charIndex":19},{"text":"指令","id":"指令","depth":3,"charIndex":27}],"domain":"","frontmatter":{},"version":""},{"id":78,"title":"Lightningcss 插件","content":"#\n\nTIP\n\n推荐使用 lightningcss 替代 postcss,提升整体效能\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\n\n\n\nPostcss 兼容#\n\n> postcss 涵盖了主流的 Postcss 插件的支持 如:\n\n * postcss.px_to_rem PX-to-REM\n * postcss.px_to_viewport PX-to-VW\n * postcss.apply postcss-apply\n * postcss.static_vars postcss-prefix-selector\n * postcss.url postcss-simple-vars\n * postcss.specific_environment_variables postcss-env-function\n * postcss.env_function postcss-env-function\n * postcss.design_tokens postcss-design-token\n * postcss.custom_units custom-units\n * postcss.property_lookup postcss-property-lookup\n * postcss.focus_visible postcss-focus-visible\n * postcss.dark_theme_class postcss-dark-theme-class\n * postcss.fix_100vh postcss-100vh-fix\n * postcss.logical_transforms rtlcss\n * postcss.hover_media_query mq4-hover-shim\n * postcss.momentum_scrolling postcss-momentum-scrolling\n * postcss.size postcss-size\n\n\n兼容性设置#\n\n * lightningcss 自动集成了 autoprefixer 通过 build.browserslist 可以自定义 browserslist\n * emp 集成了默认的浏览器设置，可以通过 store.browserslistOptions.default 或者\n   store.browserslistOptions.h5 设置 mobile web 支持\n\n","routePath":"/plugin/tool/plugin-lightningcss","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":45},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":53},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":61},{"text":"Postcss 兼容","id":"postcss-兼容","depth":3,"charIndex":71},{"text":"兼容性设置","id":"兼容性设置","depth":3,"charIndex":848}],"domain":"","frontmatter":{},"version":""},{"id":79,"title":"Postcss 插件","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\n\n\n\nPostcss 内置方法#\n\n * postcss.autoprefixer 兼容性设置 集成于 autoprefixer\n\n * postcss.pxtorem px转rem 集成于 postcss-pxtorem\n\n * postcss.pxtovw px转vw 集成于 @empjs/postcss-px-to-viewport","routePath":"/plugin/tool/plugin-postcss","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":19},{"text":"Postcss 内置方法","id":"postcss-内置方法","depth":3,"charIndex":29}],"domain":"","frontmatter":{},"version":""},{"id":80,"title":"tailwindcss 插件","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\n","routePath":"/plugin/tool/plugin-stylus","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":19}],"domain":"","frontmatter":{},"version":""},{"id":81,"title":"Tailwind CSS v4 插件","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\n\n\n\n引入样式#\n\n\n\n引入 style.css 到项目#","routePath":"/plugin/tool/plugin-tailwindcss","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":19},{"text":"引入样式","id":"引入样式","depth":3,"charIndex":29},{"text":"引入 style.css 到项目","id":"引入-stylecss-到项目","depth":4,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":82,"title":"Tailwind CSS v3 插件","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\n\n\n\n引入样式#\n\n\n\n引入 style.css 到项目#","routePath":"/plugin/tool/plugin-tailwindcss3","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":19},{"text":"引入样式","id":"引入样式","depth":3,"charIndex":29},{"text":"引入 style.css 到项目","id":"引入-stylecss-到项目","depth":4,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":83,"title":"@empjs/share 插件","content":"#\n\n\n快速开始#\n\n\n安装插件#\n\n\n注册插件#\n\nINFO\n\n> v3.5.3 会是 EMP 共享 的最终方案，后续所有配置都会围绕该配置方式推进\n\n项目依赖#\n\n * @empjs/share@3.5.3\n * @empjs/plugin-react@3.5.3 or @empjs/plugin-vue3 or @empjs/plugin-vue2\n * @empjs/cli@3.5.3\n\n如 React 与 Vue 的配置方案:#\n\nReact ：开发时无需安装 react & react-dom，如果ts，只需安装 @types/react & @types/react-dom 即可\n\n配置方案 #\n\n\n\nINFO\n\n同理 Vue3 与 Vue2 的配置方案如下：\n\n依赖除类型外、也不会在生产环境打包\n\n\n\n配置方案 #\n\n\n\n老方法 依然能用#\n\n\n\n\n配置说明#\n\n\nname#\n\n * 类型：string\n * 是否必填：是\n\nModule Federation 模块名称，name 必须保证唯一。\n\nModule Federation 通过 name 进行关联。name 将用于运行时数据获取以及 chunk 全局存储变量\n\n查看详情\n\n\nshared#\n\nshared 用于在消费者和生产间共享公共依赖，降低运行时下载体积从而提升性能。\n\n * 类型：PluginSharedOptions\n * 是否必填：否\n * 默认值：undefined\n\nPluginSharedOptions 类型如下：\n\n\n\n * Example\n\n\n\n查看详情\n\n\nremotes#\n\n * 类型：PluginRemoteOptions\n * 是否必填：否\n * 默认值：undefined\n * 使用场景：用 Module Federation 消费远程模块\n\nTIP\n\n消费者者特有参数，设置了 remotes 则可认为这是一个消费者\n\nPluginRemoteOptions 类型如下：\n\n\n\n * remoteAlias 为实际用户引用的名称，可自行配置，例如设置了 remoteAlias 为 demo ，那么消费方式为 `` 。\n * ModuleFederationInfo 由 ModuleFederation name + @ + ModuleFederation entry 组成\n   * ModuleFederation name 是生产者设置的名称\n   * entry 可以为 mf-manifest.json 和 remoteEntry.js\n   * entry 为 mf-manifest.json 拥有以下额外能力\n     * 动态模块类型提示\n     * 资源预加载\n     * chrome devtool 调试工具\n\n\n\n查看详情\n\n\nexposes#\n\n * 类型：PluginExposesOptions\n * 是否必填：否\n * 默认值：undefined\n * 使用场景：决定 Module Federation 对外暴露的模块以及文件入口\n\nTIP\n\n生产者特有参数，设置了 exposes 则可认为这是一个生产者\n\n配置之后，会将 expose 的模块单独抽离成一个 chunk ，如果有异步 chunk 会在抽取成单独 chunk（具体拆分行为根据 chunk\n拆分规则而定）。\n\nPluginExposesOptions 类型如下：\n\n\n\n其中 exposeKey 与 Package Entry Points 规范基本一致（除了不支持正则匹配）。\n\n举例：\n\n\n\n查看详情\n\n\ndts#\n\n * 类型：boolean | PluginDtsOptions\n * 是否必填：否\n * 默认值：true\n * 使用场景：用于控制 Module Federation 生成/消费类型行为\n\n配置之后，生产者会在构建时自动生成一个压缩的类型文件 @mf-types.zip（默认名称），消费者会自动拉取 remotes 的类型文件并解压至\n@mf-types（默认名称）。\n\nPluginDtsOptions 类型如下：\n\n\n\n查看详情\n\n\nmanifest#\n\n * 类型：boolean | PluginManifestOptions\n * 默认值：undefined\n\n用于控制是否生成 manifest ，以及对应的生成配置。\n\nPluginManifestOptions 类型如下：\n\n\n\n查看详情\n\n\ngetPublicPath#\n\n * 类型：string\n\n * 是否必填：否\n\n * 默认值：undefined\n\n * 作用：用于设置动态 publicPath，设置后，对应的远程模块资源也将使用此 publicPath。例如，部署的项目是动态下发 cdn_prefix\n   ，那么可以设置 getPublicPath 为 return \"https:\" + window.navigator.cdn_host +\n   \"/resource/app/\"\n\n * 示例：\n\n下面的示例中，设置了 getPublicPath，在其他消费者加载该生产者时，将会通过 new Function 的方式执行 getPublicPath\n的代码获取到返回值，将会把返回值的内容作为该模块的 publicPath 静态资源前缀\n\n\n\n相关DEMO\n\n查看详情\n\n\nempRuntime.runtimeLib#\n\n * 类型：string | 'useFrameworkLib'\n * 是否必填：否\n\nMFRuntime 远程地址\n\n\nempRuntime.runtimeGlobal#\n\n * 类型：string\n * 是否必填：否\n\nMFRuntime 全局命名\n\n\nempRuntime.frameworkLib#\n\n * 类型：string\n * 是否必填：否\n\nUI框架 远程地址\n\n\nempRuntime.frameworkGlobal#\n\n * 类型：string\n * 是否必填：否\n\nUI框架 全局命名\n\n\nempRuntime.framework#\n\n * 类型：'react' | 'vue2' | 'vue'\n * 是否必填：否\n\n快捷设置 external 默认为 react\n\n\nempRuntime.shareLib#\n\n * 类型：{[key: string]: string | string[] | {entry: string; global: string; type:\n   string}}\n * 是否必填：否\n\n兼容 emp2.0 shareLib 配置\n\n\nempRuntime.setExternals#\n\n * 类型：(o: [key: string]: string) => void\n * 是否必填：否\n\n自定义 externals 配置\n\n","routePath":"/plugin/tool/share","lang":"zh","toc":[{"text":"快速开始","id":"快速开始","depth":2,"charIndex":3},{"text":"安装插件","id":"安装插件","depth":3,"charIndex":11},{"text":"注册插件","id":"注册插件","depth":3,"charIndex":19},{"text":"项目依赖","id":"项目依赖","depth":4,"charIndex":76},{"text":"如 React 与 Vue 的配置方案:","id":"如-react-与-vue-的配置方案","depth":4,"charIndex":199},{"text":"配置方案","id":"配置方案","depth":4,"charIndex":-1},{"text":"配置方案","id":"配置方案-1","depth":4,"charIndex":-1},{"text":"老方法 依然能用","id":"老方法-依然能用","depth":4,"charIndex":373},{"text":"配置说明","id":"配置说明","depth":2,"charIndex":387},{"text":"name","id":"name","depth":3,"charIndex":395},{"text":"shared","id":"shared","depth":3,"charIndex":533},{"text":"remotes","id":"remotes","depth":3,"charIndex":688},{"text":"exposes","id":"exposes","depth":3,"charIndex":1197},{"text":"dts","id":"dts","depth":3,"charIndex":1527},{"text":"manifest","id":"manifest","depth":3,"charIndex":1755},{"text":"getPublicPath","id":"getpublicpath","depth":3,"charIndex":1891},{"text":"empRuntime.runtimeLib","id":"empruntimeruntimelib","depth":3,"charIndex":2270},{"text":"empRuntime.runtimeGlobal","id":"empruntimeruntimeglobal","depth":3,"charIndex":2355},{"text":"empRuntime.frameworkLib","id":"empruntimeframeworklib","depth":3,"charIndex":2423},{"text":"empRuntime.frameworkGlobal","id":"empruntimeframeworkglobal","depth":3,"charIndex":2485},{"text":"empRuntime.framework","id":"empruntimeframework","depth":3,"charIndex":2550},{"text":"empRuntime.shareLib","id":"empruntimesharelib","depth":3,"charIndex":2641},{"text":"empRuntime.setExternals","id":"empruntimesetexternals","depth":3,"charIndex":2790}],"domain":"","frontmatter":{},"version":""},{"id":84,"title":"","content":"前期准备#\n\n在开始之前，请确保您已经配备了如下开发环境：\n\n * Node.js >= 20.0.0\n * npm >= 8\n\n💡 TIP\n\n建议您使用nvm来管理node版本，直接执行nvm use 20命令即可完成开发环境设置","routePath":"/shared/preparation","lang":"zh","toc":[{"text":"前期准备","id":"前期准备","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":85,"title":"","content":"项目没有html模板，我需要更改项目icon怎么办？#\n\n默认项目的icon为React的icon，我们有两种方法更改项目的icon：\n\n * （✨推荐）参考 设置页面图标 进行配置 配置完毕后，重新启动您项目即可查看到您的更改🔧。\n\n * 参考 设置页面模板 进行配置 配置完毕后，重新启动您项目即可查看到您的更改🔧。","routePath":"/shared/problems/iconChange","lang":"zh","toc":[{"text":"项目没有html模板，我需要更改项目icon怎么办？","id":"项目没有html模板我需要更改项目icon怎么办","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":86,"title":"","content":"使用yarn无法启动项目，缺失部分module#\n\n在Vue项目中，我们使用了 @empjs/plugin-vue2 和 @empjs/plugin-vue3\n两个插件，在实际开发中，我们注意到了这个模块缺失导致的问题。 这是因为在这两个插件中，我们引用了 vue-loader 这个依赖，而这个依赖又依赖于\nwebpack， 由于yarn的包管理机制，我们无法在高版本的Node版本下安装 webpack 的低版本，所以导致了这一问题的发生。\n\n目前对于这个问题的解决，我们提供了两种方案进行选择：\n\n * （✨推荐） 使用 pnpm\n   包管理器解决这一问题。由于pnpm在这种情况下，会自动将webpack安装更为适合当前node版本的版本，而不是抛出警告然后不安装它，所以使用pnpm可以\n   完美解决这一问题。\n\n * 如果你想继续使用yarn，您可以手动安装 webpack 这一依赖，具体安装命令如下：\n   \n   \n\n如果您在npm中遇到类似的问题，您也可以尝试这两个方案进行解决。","routePath":"/shared/problems/yarnProblem","lang":"zh","toc":[{"text":"使用yarn无法启动项目，缺失部分module","id":"使用yarn无法启动项目缺失部分module","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""}]